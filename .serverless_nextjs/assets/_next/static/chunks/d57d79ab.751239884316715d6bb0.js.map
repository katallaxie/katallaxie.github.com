{"version":3,"sources":["webpack://_N_E/./node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","TokenType","label","conf","this","keyword","beforeExpr","startsExpr","rightAssociative","isLoop","isAssign","prefix","postfix","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","last","stack","length","ErrorMessages","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","DuplicateStaticBlock","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","state","context","exprAllowed","out","pop","curContext","prevType","allowed","isIterator","push","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","pos","i","isIdentifierStart","test","String","fromCharCode","isIdentifierChar","reservedWords","keywords$1","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","Scope","flags","var","lexical","functions","ScopeHandler","raise","scopeStack","undefinedExports","undefinedPrivateNames","currentVarScope","currentThisScope","treatFunctionsAsVarInScope","currentScope","createScope","scope","bindingType","checkRedeclarationInScope","maybeExportDefined","SCOPE_PROGRAM","delete","isRedeclaredInScope","indexOf","id","FlowScope","args","super","declareFunctions","FlowScopeHandler","declareName","arguments","includes","checkLocalExport","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","hasTypeImportKind","node","importKind","isMaybeDefaultImport","type","exportSuggestions","const","let","interface","FLOW_PRAGMA_REGEX","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","object","getQualifiedJSXName","namespace","property","Error","j_oTag","j_cTag","j_expr","jsxName","jsxText","jsxTagStart","jsxTagEnd","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","ProductionParameterHandler","stacks","currentFlags","functionFlags","isAsync","isGenerator","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateModifier","DuplicateAccessibilityModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","IndexSignatureHasDeclare","InvalidModifierOnTypeMember","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","tsIsAccessModifier","modifier","placeholder","hasPlugin","plugins","some","plugin","Array","isArray","getPluginOption","option","find","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","mixinPlugins","estree","superClass","pattern","regex","e","estreeParseLiteral","bigInt","BigInt","_unused","parseLiteral","directive","directiveLiteral","stmt","startNodeAt","loc","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isObjectProperty","checkDeclaration","method","params","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","directiveStatements","directives","map","d","directiveToStmt","body","concat","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","refExpressionErrors","estreeParseRegExpLiteral","estreeParseBigIntLiteral","estreeParseDecimalLiteral","parseExprAtom","startPos","startLoc","allowExpression","isMethod","parseFunctionBody","allowDirectSuper","inClassScope","funcNode","startNode","kind","finishNode","isPattern","isAccessor","parseObjectMethod","shorthand","parseObjectProperty","isLHS","toAssignable","key","toAssignableObjectExpressionProp","optional","finishCallExpression","callee","toReferencedArguments","parseExport","exported","specifiers","base","noCalls","parseSubscript","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","jsx","chunkStart","ch","input","charCodeAt","finishToken","getTokenFromCode","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","quote","entity","str","count","substr","fromCodePoint","parseInt","match","unexpected","next","jsxParseIdentifier","eat","jsxParseNamespacedName","newNode","jsxParseExpressionContainer","lastTokEnd","lastTokEndLoc","parseExpression","expect","jsxParseEmptyExpression","argument","parseMaybeAssignAllowIn","jsxParseAttributeValue","jsxParseElementName","jsxParseOpeningElementAfterName","attributes","jsxParseAttribute","selfClosing","children","openingElement","jsxParseOpeningElementAt","closingElement","contents","jsxParseClosingElementAt","jsxParseElementAt","jsxParseSpreadChild","openingFragment","closingFragment","isRelational","jsxParseElement","inPropertyName","jsxReadToken","jsxReadWord","jsxReadString","flow","flowPragma","undefined","val","comment","matches","exec","addComment","tok","oldInType","inType","flowParseType","moduloLoc","moduloPos","checksLoc","expectContextual","predicate","flowParsePredicate","flowParseInterfaceish","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","flowParseTypeAndPredicateInitialiser","typeAnnotation","resetEndLocation","semicolon","insideModule","flowParseDeclareClass","flowParseDeclareFunction","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","lastTokStart","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","BIND_KIND_VALUE","enter","bodyNode","parseImport","flowParseDeclare","exit","hasModuleExport","forEach","bodyElement","declaration","isEsModuleType","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","liberal","checkReservedType","right","flowParseTypeInitialiser","declare","supertype","impltype","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","flowParseTypeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeOrImplicitInstantiation","isStatic","static","lookahead","flowParseObjectPropertyKey","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","valueNode","endDelim","exact","callProperties","properties","indexers","internalSlots","inexact","protoStart","inexactStart","flowParseObjectTypeInternalSlot","flowParseObjectTypeIndexer","flowParseObjectTypeCallProperty","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParsePrimaryType","lh","checkNotUnderscore","flowParseGenericType","isGroupedType","flowParseInterfaceType","flowIdentToTypeAnnotation","flowParseTupleType","reinterpretTypeAsFunctionTypeParam","flowParseTypeofType","createIdentifier","canInsertSemicolon","elementType","flowParsePrefixType","flowParsePostfixType","param","flowParseAnonFunctionWithoutParens","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","topLevel","strict","flowParseInterface","shouldParseEnums","flowParseEnumDeclaration","parseStatement","isValidDirective","expr","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","refNeedsArrowPos","result","tryParse","parseConditional","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","arrows","finishArrowValidation","list","list1","list2","partition","every","isAssignable","_node$extra","toAssignableList","trailingComma","SCOPE_FUNCTION","checkParams","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","declarationNode","parseExportSpecifiers","parseExportFrom","parseExportDeclaration","eatExportStar","hasNamespace","maybeParseExportNamespaceSpecifier","isStatement","optionalId","parseClassId","member","parseClassMemberFromModifier","parseClassMember","finishOp","current","isIteratorStart","readWord","isBinding","elements","element","operator","typeCastToParameter","exprList","trailingCommaPos","isParenthesizedExpr","_expr$extra","close","canBePattern","isTuple","parseArrayLike","maybeInArrowParameters","toReferencedList","checkLVal","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassMethod","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","isPrivateNameAllowed","parsePropertyName","parseObjPropValue","left","parseMaybeDefault","shouldParseDefaultImport","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","allowModifiers","parseFunctionParams","parseVarId","call","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","afterLeftParse","_jsx","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","canBeArrow","parseParenAndDistinguishExpression","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","parseSubscripts","subscriptState","isLookaheadToken_lt","typeArguments","shouldParseTypes","flowParseTypeParameterInstantiationCallOrNew","targs","parseNewArguments","parseArrowExpression","hasFlowComment","nextToken","readToken_mult_modulo","readToken_pipe_amp","file","program","fileNode","parseTopLevel","skipFlowComment","hasFlowCommentCompletion","skipBlockComment","shiftToFirstNonWhiteSpace","ch2","ch3","enumName","memberName","toUpperCase","suppliedType","explicitType","message","endOfInit","literal","parseBooleanLiteral","init","flowEnumMemberInit","expectedType","flowEnumErrorInvalidMemberInitializer","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","flowEnumMemberRaw","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","add","flowEnumCheckExplicitTypeMismatch","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorNumberMemberNotInitialized","initializedMembers","_i","flowEnumErrorStringMemberInconsistentlyInitailized","_i2","flowEnumErrorInvalidExplicitType","nameLoc","flowEnumParseExplicitType","flowEnumMembers","flowEnumStringMembers","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","flowEnumErrorInconsistentMemberValues","flowEnumBody","nextTokenStart","afterNext","typescript","isLiteralPropertyName","allowedModifiers","tsTryParse","tsNextTokenCanFollowModifier","bind","modified","disallowedModifiers","errorTemplate","tsParseModifier","accessibility","hasOwnProperty","parseElement","tsIsListTerminator","tsParseDelimitedListWorker","expectSuccess","bracket","skipFirstToken","tsParseDelimitedList","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","typeName","lhs","parameterName","tsParseTypeAnnotation","asserts","exprName","tsParseImportType","parseIdentifierName","constraint","tsEatThenParseType","tsParseTypeParameters","tsParseBracketedList","tsParseTypeParameter","tsParseTypeReference","returnToken","signature","returnTokenRequired","tsTryParseTypeParameters","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsFillSignature","tsParseTypeMemberSemicolon","tsLookAhead","tsIsUnambiguouslyIndexSignature","tsTryParseTypeAnnotation","readonly","nodeAny","tsParseSignatureMember","tsParsePropertyOrMethodSignature","tsParseModifiers","idx","tsTryParseIndexSignature","tsParseObjectTypeMembers","tsParseList","tsParseTypeMember","tsIsIdentifier","tsExpectThenParseType","tsParseMappedTypeParameter","nameType","tsParseType","tsTryParseType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeledNode","optionalTypeNode","restNode","parseTemplate","parseTemplateSubstitution","thisKeyword","tsParseThisTypeNode","tsParseThisTypePredicate","keywordTypeFromName","lookaheadCharCode","tsParseLiteralTypeNode","parseMaybeUnary","tsParseThisTypeOrThisTypePredicate","tsParseTypeQuery","tsIsStartOfMappedType","tsParseMappedType","tsParseTypeLiteral","tsParseTupleType","tsParseParenthesizedType","tsParseTemplateLiteralType","tsParseNonArrayType","objectType","indexType","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","kw","tsParseTypeOperator","tsParseInferType","tsParseArrayTypeOrHigher","parseConstituentType","hasLeadingOperator","tsParseUnionOrIntersectionType","tsParseIntersectionTypeOrHigher","tsIsUnambiguouslyStartOfFunctionType","braceStackCounter","tsSkipParameterStart","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsIsStartOfFunctionType","tsParseFunctionOrConstructorType","tsParseUnionTypeOrHigher","tsTryNextParseConstantContext","tsNextThenParseType","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseHeritageClause","cb","oldContext","tsDoThenParseType","initializer","isConst","BIND_TS_ENUM","tsParseEnumMember","parseBlockOrModuleBlockBody","nested","inner","tsParseModuleOrNamespaceDeclaration","prodParam","tsParseModuleBlock","global","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","tsParseEnumDeclaration","parseVarStatement","tsParseAmbientExternalModuleDeclaration","tsParseDeclaration","tsTryParseDeclare","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","hasFollowingLineBreak","oldMaybeInArrowParameters","tsTryParseAndCatch","tsTryParseTypeOrTypePredicateAnnotation","tsInNoContext","tsIsDeclarationStart","decorators","parseAccessModifier","parseAssignableListItemTypes","elt","pp","parameter","bodilessType","isDeclareContext","registerFunctionStatementId","items","isInParens","tsCheckForInvalidTypeCasts","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","tsTryParseGenericAsyncArrowFunction","parseTaggedTemplateExpression","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","parseExprOp","checkKeywords","ahead","tsParseImportEqualsDeclaration","importNode","isAbstractClass","cls","abstract","parseStatementContent","callParseClassMember","inAbstractClass","parseClassMemberWithIsStatic","methodOrProp","tsParseExpressionStatement","isDeclare","tsTryParseExportDeclaration","resetStartLocation","definite","parseClassPropertyAnnotation","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","tsParseTypeAssertion","parseBindingAtom","parseMaybeDecoratorArguments","readToken_lt_gt","canHaveLeadingDecorator","baseCount","getGetterSetterExpectedParamCount","firstParam","getObjectOrClassMethodParams","parseCatchClauseParam","oldIsDeclareContext","oldInAbstractClass","v8intrinsic","v8IntrinsicStart","identifier","parseV8Intrinsic","placeholders","expectedNode","assertNoSpace","finishPlaceholder","isFinished","parsePlaceholder","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","filter","checkExport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","errorRecovery","State","endLoc","errors","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","trailingComments","leadingComments","commentStack","commentPreviousNode","lastTokStartLoc","strictErrors","exportedIdentifiers","tokensLength","curPosition","skipArrays","_isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","oct","bin","dec","Token","ExpressionErrors","shorthandAssign","doubleProto","Node","parser","range","innerComments","unwrapParenthesizedExpression","ExpressionScope","ArrowHeadParsingScope","iterator","ExpressionScopeHandler","isCertainlyParameterDeclaration","canBeArrowParameterDeclaration","recordDeclarationError","iterateErrors","clearDeclarationError","newExpressionScope","loopLabel","switchLabel","loneSurrogate","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","_Array$from","from","classScope","redefined","CLASS_ELEMENT_KIND_GETTER","accessor","get","oldStatic","newStatic","_this$stack","Parser","sawUnambiguousESM","ambiguousScriptDifferentAst","takeAllComments","lastElement","j","splice","newTrailingComments","leadingComment","firstChild","lastChild","lastInStack","adjustCommentsAfterTrailingComma","firstTrailingCommentIndex","findIndex","offset","lastIndex","index","getLineInfo","raiseWithData","getLocationForPosition","replace","_","_raise","data","errorContext","err","SyntaxError","isLookahead","checkKeywordEscapes","pushToken","old","curr","clear","skipSpace","codePointAt","block","text","pushComment","startSkip","loop","skipLineComment","readToken_interpreter","nextPos","readNumber","readRegexp","width","size","next2","readToken_dot","readToken_question","readRadixNumber","readString","readToken_slash","readToken_caret","readToken_plus_min","readToken_eq_excl","readToken_numberSign","escaped","inClass","charAt","content","mods","char","charCode","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","readInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","readCodePoint","octalStr","octal","n","escStart","identifierCheck","esc","readWord1","parent","update","op","nameStart","nameEnd","allowAsi","messageOrType","missingPlugin","names","join","fn","oldState","abortSignal","andThrow","isPrivateName","processComment","locationNode","_node$extra3","expressionScope","recordParenthesizedIdentifierError","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseObjectLike","closeCharCode","allowEmpty","elts","first","parseRestBinding","checkCommaAfterRest","parseDecorator","parseAssignableListItem","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","_expr$properties","isObjectMethod","_expr$elements","elem","isRecord","protoRef","computed","used","paramFlags","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","hasYield","parseYield","ownExpressionErrors","parseMaybeConditional","checkExpressionErrors","parseExprOps","shouldExitDescending","prec","hasIn","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwait","isAwaitAllowed","parseAwait","isDelete","parseUpdate","isAmbiguousAwait","raiseOverwrite","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseMaybePrivateName","usePrivateName","getPrivateNameSV","parseNoCallExpr","validateAsPattern","tag","quasi","_node$arguments","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","expectOnePlugin","oldLabels","allowSuper","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","inNonArrowFunction","parseNew","isOptionalChain","parseExprList","isTagged","cooked","tail","curElt","parseTemplateElement","quasis","propHash","create","parsePropertyDefinition","checkProto","parseSpread","maybeAsyncOrAccessorProp","keyName","_params","checkGetterSetterParams","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","_node$params","inStaticBlock","recordAsyncArrowParametersError","inFunction","recordParameterInitializerError","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","outerContextSoloAwaitState","ret","interpreter","parseInterpreterDirective","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","withTopicForbiddingContext","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","hasReturn","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","_this$state$labels","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","setStrict","isForIn","await","isFor","isTypescript","parseMaybeAssignDisallowIn","statement","isHangingStatement","requireId","treatFunctionsAsVar","constructorAllowsSuper","hadConstructor","hadStaticBlock","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isPrivate","isSimple","maybeQuestionTokenStart","parsePostMemberNameModifiers","pushClassPrivateProperty","pushClassProperty","_member$decorators","SCOPE_CLASS","declarePrivateName","CLASS_ELEMENT_KIND_SETTER","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","FUNC_STATEMENT","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","checkDuplicateExports","_declaration$extra","_node$specifiers","exportedName","_node$declaration$dec","_i5","_node$properties","_i6","_node$elements","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","attrs","attrNames","parseAssertEntries","parseImportSpecifierLocal","parseImportSpecifier","opts","_Object$keys","getOptions","getScopeHandler","pluginMap","pluginsMap","getParser","decoratorsBeforeExport","validatePlugins","pluginsFromOptions","pluginList","parserClassCache","getParserClass","_options","ast","moduleError","_unused2","getExpression","tokTypes"],"mappings":"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","file":"static/chunks/d57d79ab.751239884316715d6bb0.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block\",\n  AwaitExpressionFormalParameter: \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter: \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  DuplicateStaticBlock: \"Duplicate static block in the same class\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer: \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar: \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed: \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper: \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0\"\n});\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, errorTemplate, ...params) {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseOverwrite(pos, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  estreeParseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) == null ? void 0 : _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    switch (this.state.type) {\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.bigint:\n        return this.estreeParseBigIntLiteral(this.state.value);\n\n      case types.decimal:\n        return this.estreeParseDecimalLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.override = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types._function && prevType !== types._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && this.hasPrecedingLineBreak()) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.braceHashL.updateContext = function () {\n  this.state.context.push(types$1.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords$1 = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords$1.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = [];\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\"\n});\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => {\n  var _temp;\n\n  return _temp = class extends superClass {\n    constructor(...args) {\n      super(...args);\n      this.flowPragma = undefined;\n    }\n\n    getScopeHandler() {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes() {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums() {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type, val) {\n      if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment) {\n      if (this.flowPragma === undefined) {\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n        if (!matches) ; else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || types.colon);\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate() {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(types.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n\n      if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n\n      if (this.eat(types.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(types.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(types.colon);\n      let type = null;\n      let predicate = null;\n\n      if (this.match(types.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n\n        if (this.match(types.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node) {\n      this.next();\n      this.flowParseInterfaceish(node, true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(node) {\n      this.next();\n      const id = node.id = this.parseIdentifier();\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(types.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(types.parenR);\n      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n      this.resetEndLocation(id);\n      this.semicolon();\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(node, insideModule) {\n      if (this.match(types._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(types._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(types._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(types.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(types._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(node) {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(true);\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node) {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(types.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = node.body = this.startNode();\n      const body = bodyNode.body = [];\n      this.expect(types.braceL);\n\n      while (!this.match(types.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(types._import)) {\n          this.next();\n\n          if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n            this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n          }\n\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n      this.expect(types.braceR);\n      this.finishNode(bodyNode, \"BlockStatement\");\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n          }\n\n          if (kind === \"ES\") {\n            this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n          }\n\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(node, insideModule) {\n      this.expect(types._export);\n\n      if (this.eat(types._default)) {\n        if (this.match(types._function) || this.match(types._class)) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n\n        node.default = true;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n        }\n\n        if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(node) {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(node) {\n      this.next();\n      this.flowParseTypeAlias(node);\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(node) {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(node) {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    flowParseInterfaceish(node, isClass = false) {\n      node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n      this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false\n      });\n    }\n\n    flowParseInterfaceExtends() {\n      const node = this.startNode();\n      node.id = this.flowParseQualifiedTypeIdentifier();\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node) {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word, startLoc, declaration) {\n      if (!reservedTypes.has(word)) return;\n      this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n    }\n\n    flowParseRestrictedIdentifier(liberal, declaration) {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    flowParseTypeAlias(node) {\n      node.id = this.flowParseRestrictedIdentifier(false, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(types.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(node, declare) {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(true, true);\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.supertype = null;\n\n      if (this.match(types.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(types.colon);\n      }\n\n      node.impltype = null;\n\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(types.eq);\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    flowParseTypeParameter(requireDefault = false) {\n      const nodeStart = this.state.start;\n      const node = this.startNode();\n      const variance = this.flowParseVariance();\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(types.eq)) {\n        this.eat(types.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration() {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n      this.state.inType = true;\n\n      if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      } while (!this.isRelational(\">\"));\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew() {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n      this.state.inType = true;\n      this.expectRelational(\"<\");\n\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n        if (!this.isRelational(\">\")) {\n          this.expect(types.comma);\n        }\n      }\n\n      this.expectRelational(\">\");\n      this.state.inType = oldInType;\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType() {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n      node.extends = [];\n\n      if (this.eat(types._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(types.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false\n      });\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey() {\n      return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(node, isStatic, variance) {\n      node.static = isStatic;\n\n      if (this.lookahead().type === types.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n\n      this.expect(types.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(node, isStatic) {\n      node.static = isStatic;\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(types.bracketR);\n      this.expect(types.bracketR);\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n      } else {\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          node.optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n      }\n\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(node) {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(types.parenL);\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n\n      this.expect(types.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(node, isStatic) {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    }) {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const nodeStart = this.startNode();\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n      let endDelim;\n      let exact;\n      let inexact = false;\n\n      if (allowExact && this.match(types.braceBarL)) {\n        this.expect(types.braceBarL);\n        endDelim = types.braceBarR;\n        exact = true;\n      } else {\n        this.expect(types.braceL);\n        endDelim = types.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart = null;\n        let inexactStart = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(types.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (this.eat(types.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n          } else {\n            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n          }\n        } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n\n            if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n          this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n        }\n      }\n\n      this.expect(endDelim);\n\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n      this.state.inType = oldInType;\n      return out;\n    }\n\n    flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n      if (this.eat(types.ellipsis)) {\n        const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n        let optional = false;\n\n        if (this.isRelational(\"<\") || this.match(types.parenL)) {\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n          node.method = false;\n\n          if (this.eat(types.question)) {\n            optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    flowCheckGetterSetterParams(property) {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon() {\n      if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(types.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(startPos, startLoc, id) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType() {\n      const node = this.startNode();\n      this.expect(types._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType() {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(types.bracketL);\n\n      while (this.state.pos < this.length && !this.match(types.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(types.bracketR)) break;\n        this.expect(types.comma);\n      }\n\n      this.expect(types.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam() {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n\n      if (lh.type === types.colon || lh.type === types.question) {\n        name = this.parseIdentifier();\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(type) {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params = []) {\n      let rest = null;\n\n      while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n\n        if (!this.match(types.parenR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      if (this.eat(types.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n\n      return {\n        params,\n        rest\n      };\n    }\n\n    flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    flowParsePrimaryType() {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case types.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n        case types.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true\n          });\n\n        case types.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false\n          });\n\n        case types.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case types.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(types.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(types.parenR);\n            this.expect(types.arrow);\n            node.returnType = this.flowParseType();\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n\n          break;\n\n        case types.parenL:\n          this.next();\n\n          if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n            if (this.match(types.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== types.question && token !== types.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n              this.expect(types.parenR);\n              return type;\n            } else {\n              this.eat(types.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case types.string:\n          return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n        case types._true:\n        case types._false:\n          node.value = this.match(types._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case types.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n\n            if (this.match(types.num)) {\n              return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            if (this.match(types.bigint)) {\n              return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n            }\n\n            throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n          }\n\n          throw this.unexpected();\n\n        case types.num:\n          return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n        case types.bigint:\n          return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n        case types._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case types._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case types._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case types.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType() {\n      const startPos = this.state.start,\n            startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n\n      while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(types.bracketL);\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n\n      return type;\n    }\n\n    flowParsePrefixType() {\n      const node = this.startNode();\n\n      if (this.eat(types.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens() {\n      const param = this.flowParsePrefixType();\n\n      if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n\n      return param;\n    }\n\n    flowParseIntersectionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType() {\n      const node = this.startNode();\n      this.eat(types.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n\n      while (this.eat(types.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n\n      return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType() {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation() {\n      if (this.state.type === types.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation() {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n      if (this.match(types.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n\n      return ident;\n    }\n\n    typeCastToParameter(node) {\n      node.expression.typeAnnotation = node.typeAnnotation;\n      this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n      return node.expression;\n    }\n\n    flowParseVariance() {\n      let variance = null;\n\n      if (this.match(types.plusMin)) {\n        variance = this.startNode();\n\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n\n      return variance;\n    }\n\n    parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(node, type, isMethod = false) {\n      if (this.match(types.colon)) {\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    parseStatement(context, topLevel) {\n      if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type === types.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n\n    parseExpressionStatement(node, expr) {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(types.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    shouldParseExportDeclaration() {\n      return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier() {\n      if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n      if (!this.match(types.question)) return expr;\n\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n        if (!result.node) {\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(types.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let {\n        consequent,\n        failed\n      } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({\n            consequent,\n            failed\n          } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(types.colon);\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent() {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(types.colon);\n      this.state.noArrowParamsConversionAt.pop();\n      return {\n        consequent,\n        failed\n      };\n    }\n\n    getArrowLikeExpressions(node, disallowInvalid) {\n      const stack = [node];\n      const arrows = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n    }\n\n    finishArrowValidation(node) {\n      var _node$extra;\n\n      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt(node, parse) {\n      let result;\n\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(node, startPos, startLoc) {\n      node = super.parseParenItem(node, startPos, startLoc);\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(types.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node) {\n      if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node) {\n      const decl = super.parseExport(node);\n\n      if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n\n      return decl;\n    }\n\n    parseExportDeclaration(node) {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(types.braceL)) {\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node) {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node) {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n\n      return hasNamespace;\n    }\n\n    parseClassId(node, isStatement, optionalId) {\n      super.parseClassId(node, isStatement, optionalId);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(classBody, member, state) {\n      const pos = this.state.start;\n\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n        }\n      }\n    }\n\n    getTokenFromCode(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 123 && next === 124) {\n        return this.finishOp(types.braceBarL, 2);\n      } else if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(types.relational, 1);\n      } else if (this.state.inType && code === 63) {\n        return this.finishOp(types.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node, isBinding) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            const last = node.properties.length - 1;\n            return node.properties.every((prop, i) => {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node, isLHS = false) {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableList(exprList, trailingCommaPos, isLHS) {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n\n        if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    toReferencedList(exprList, isParenthesizedExpr) {\n      for (let i = 0; i < exprList.length; i++) {\n        var _expr$extra;\n\n        const expr = exprList[i];\n\n        if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) == null ? void 0 : _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(expr, ...args) {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    parseClassProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(node) {\n      if (this.match(types.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      return super.parseClassPrivateProperty(node);\n    }\n\n    isClassMethod() {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty() {\n      return this.match(types.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method) {\n      return !this.match(types.colon) && super.isNonstaticConstructor(method);\n    }\n\n    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    }\n\n    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      if (method.variance) {\n        this.unexpected(method.variance.start);\n      }\n\n      delete method.variance;\n\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node) {\n      super.parseClassSuper(node);\n\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented = node.implements = [];\n\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(true);\n\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(types.comma));\n      }\n    }\n\n    parsePropertyName(node, isPrivateNameAllowed) {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      node.variance = variance;\n      return key;\n    }\n\n    parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      if (prop.variance) {\n        this.unexpected(prop.variance.start);\n      }\n\n      delete prop.variance;\n      let typeParameters;\n\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(types.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param) {\n      if (this.eat(types.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        param.optional = true;\n      }\n\n      if (this.match(types.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(startPos, startLoc, left) {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node) {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    maybeParseDefaultImportSpecifier(node) {\n      node.importKind = \"value\";\n      let kind = null;\n\n      if (this.match(types._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n\n      if (kind) {\n        const lh = this.lookahead();\n\n        if (kind === \"type\" && lh.type === types.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    parseImportSpecifier(node) {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n      let specifierTypeKind = null;\n\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n\n        if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(firstIdentLoc, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(specifier.local.name, specifier.local.start, true);\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseFunctionParams(node, allowModifiers) {\n      const kind = node.kind;\n\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    parseVarId(decl, kind) {\n      super.parseVarId(decl, kind);\n\n      if (this.match(types.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id);\n      }\n    }\n\n    parseAsyncArrowFromCallExpression(node, call) {\n      if (this.match(types.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    shouldParseAsyncArrow() {\n      return this.match(types.colon) || super.shouldParseAsyncArrow();\n    }\n\n    parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n      var _jsx;\n\n      let state = null;\n      let jsx;\n\n      if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n        state = this.state.clone();\n        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n        if (!jsx.error) return jsx.node;\n        const {\n          context\n        } = this.state;\n\n        if (context[context.length - 1] === types$1.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === types$1.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (((_jsx = jsx) == null ? void 0 : _jsx.error) || this.isRelational(\"<\")) {\n        var _jsx2, _jsx3;\n\n        state = state || this.state.clone();\n        let typeParameters;\n        const arrow = this.tryParse(abort => {\n          var _arrowExpression$extr;\n\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n            this.resetStartLocationFromNode(result, typeParameters);\n            return result;\n          });\n\n          if (arrowExpression.type !== \"ArrowFunctionExpression\" && ((_arrowExpression$extr = arrowExpression.extra) == null ? void 0 : _arrowExpression$extr.parenthesized)) {\n            abort();\n          }\n\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n          return arrowExpression;\n        }, state);\n        let arrowExpression = null;\n\n        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n          if (!arrow.error && !arrow.aborted) {\n            if (arrow.node.async) {\n              this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n    }\n\n    parseArrow(node) {\n      if (this.match(types.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          const typeNode = this.startNode();\n          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(types.arrow)) this.unexpected();\n          return typeNode;\n        });\n        if (result.thrown) return null;\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow() {\n      return this.match(types.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(node, params) {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(node, allowDuplicates, isArrowFunction) {\n      if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow) {\n      return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n    }\n\n    parseSubscripts(base, startPos, startLoc, noCalls) {\n      if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n        const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n      if (this.match(types.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n\n        this.next();\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(types.parenL);\n          node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(node, subscriptState.optionalChainMember);\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n    }\n\n    parseNewArguments(node) {\n      let targs = null;\n\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n      }\n\n      node.typeArguments = targs;\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(node, undefined, true);\n    }\n\n    readToken_mult_modulo(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 47 && this.state.hasFlowComment) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code) {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 124 && next === 125) {\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file, program) {\n      const fileNode = super.parseTopLevel(file, program);\n\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n\n      return fileNode;\n    }\n\n    skipBlockComment() {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n        }\n\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment() {\n      const {\n        pos\n      } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n\n      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === 58 && ch3 === 58) {\n        return shiftToFirstNonWhiteSpace + 2;\n      }\n\n      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n        return shiftToFirstNonWhiteSpace + 12;\n      }\n\n      if (ch2 === 58 && ch3 !== 58) {\n        return shiftToFirstNonWhiteSpace;\n      }\n\n      return false;\n    }\n\n    hasFlowCommentCompletion() {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n      }\n    }\n\n    flowEnumErrorBooleanMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n    }\n\n    flowEnumErrorInvalidMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n    }\n\n    flowEnumErrorDuplicateMemberName(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(pos, {\n      enumName,\n      suppliedType\n    }) {\n      return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n    }\n\n    flowEnumErrorInvalidMemberInitializer(pos, {\n      enumName,\n      explicitType,\n      memberName\n    }) {\n      let message = null;\n\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n\n        default:\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(pos, {\n      enumName,\n      memberName\n    }) {\n      this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n      enumName\n    }) {\n      this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n    }\n\n    flowEnumMemberInit() {\n      const startPos = this.state.start;\n\n      const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n      switch (this.state.type) {\n        case types.num:\n          {\n            const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"number\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types.string:\n          {\n            const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n            if (endOfInit()) {\n              return {\n                type: \"string\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        case types._true:\n        case types._false:\n          {\n            const literal = this.parseBooleanLiteral();\n\n            if (endOfInit()) {\n              return {\n                type: \"boolean\",\n                pos: literal.start,\n                value: literal\n              };\n            }\n\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n          }\n\n        default:\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n      }\n    }\n\n    flowEnumMemberRaw() {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n        type: \"none\",\n        pos\n      };\n      return {\n        id,\n        init\n      };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n      const {\n        explicitType\n      } = context;\n\n      if (explicitType === null) {\n        return;\n      }\n\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType\n    }) {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: []\n      };\n\n      while (!this.match(types.braceR)) {\n        const memberNode = this.startNode();\n        const {\n          id,\n          init\n        } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n\n        if (memberName === \"\") {\n          continue;\n        }\n\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName\n          });\n        }\n\n        seenNames.add(memberName);\n        const context = {\n          enumName,\n          explicitType,\n          memberName\n        };\n        memberNode.id = id;\n\n        switch (init.type) {\n          case \"boolean\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n              memberNode.init = init.value;\n              members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n              break;\n            }\n\n          case \"number\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n              memberNode.init = init.value;\n              members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n              break;\n            }\n\n          case \"string\":\n            {\n              this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n              memberNode.init = init.value;\n              members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n              break;\n            }\n\n          case \"invalid\":\n            {\n              throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n            }\n\n          case \"none\":\n            {\n              switch (explicitType) {\n                case \"boolean\":\n                  this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                  break;\n\n                case \"number\":\n                  this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                  break;\n\n                default:\n                  members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n              }\n            }\n        }\n\n        if (!this.match(types.braceR)) {\n          this.expect(types.comma);\n        }\n      }\n\n      return members;\n    }\n\n    flowEnumStringMembers(initializedMembers, defaultedMembers, {\n      enumName\n    }) {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (let _i = 0; _i < initializedMembers.length; _i++) {\n          const member = initializedMembers[_i];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return defaultedMembers;\n      } else {\n        for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n          const member = defaultedMembers[_i2];\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n            enumName\n          });\n        }\n\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName\n    }) {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(types.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null\n          });\n        }\n\n        const {\n          value\n        } = this.state;\n        this.next();\n\n        if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value\n          });\n        }\n\n        return value;\n      }\n\n      return null;\n    }\n\n    flowEnumBody(node, {\n      enumName,\n      nameLoc\n    }) {\n      const explicitType = this.flowEnumParseExplicitType({\n        enumName\n      });\n      this.expect(types.braceL);\n      const members = this.flowEnumMembers({\n        enumName,\n        explicitType\n      });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n            enumName\n          });\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(types.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n\n        default:\n          {\n            const empty = () => {\n              node.members = [];\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            };\n\n            node.explicitType = false;\n            const boolsLen = members.booleanMembers.length;\n            const numsLen = members.numberMembers.length;\n            const strsLen = members.stringMembers.length;\n            const defaultedLen = members.defaultedMembers.length;\n\n            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n              return empty();\n            } else if (!boolsLen && !numsLen) {\n              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                enumName\n              });\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumStringBody\");\n            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n              for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n                const member = _members$defaultedMem[_i3];\n                this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.booleanMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumBooleanBody\");\n            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n              for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n                const member = _members$defaultedMem2[_i4];\n                this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                  enumName,\n                  memberName: member.id.name\n                });\n              }\n\n              node.members = members.numberMembers;\n              this.expect(types.braceR);\n              return this.finishNode(node, \"EnumNumberBody\");\n            } else {\n              this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                enumName\n              });\n              return empty();\n            }\n          }\n      }\n    }\n\n    flowParseEnumDeclaration(node) {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType) {\n      if (this.match(types.name) && this.state.value === \"of\" && prevType === types.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    isLookaheadToken_lt() {\n      const next = this.nextTokenStart();\n\n      if (this.input.charCodeAt(next) === 60) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return afterNext !== 60 && afterNext !== 61;\n      }\n\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n\n  }, _temp;\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0')\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\"\n});\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return (this.match(types.bracketL) || this.match(types.braceL) || this.match(types.star) || this.match(types.ellipsis) || this.match(types.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers == null ? void 0 : disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types.question);\n    const labeled = this.eat(types.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.bigint:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types.bigint:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types.num && nextToken.type !== types.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    return this.tsInDeclareContext(() => {\n      switch (starttype) {\n        case types._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types._const:\n          if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types._class) || this.match(types.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) || this.match(types.star) || this.match(types.braceL)) {\n      const ahead = this.lookahead();\n\n      if (this.match(types.name) && ahead.type === types.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n\n      if (this.isContextual(\"type\") && ahead.type !== types.comma && !(ahead.type === types.name && ahead.value === \"from\")) {\n        node.importKind = \"type\";\n        this.next();\n      }\n    }\n\n    if (!node.importKind) {\n      node.importKind = \"value\";\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, \"A type-only import can specify a default import or named bindings, but not both.\");\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state) {\n    this.tsParseModifiers(member, [\"declare\", \"private\", \"public\", \"protected\"]);\n\n    const callParseClassMember = () => {\n      super.parseClassMember(classBody, member, state);\n    };\n\n    if (member.declare) {\n      this.tsInDeclareContext(callParseClassMember);\n    } else {\n      callParseClassMember();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (isStatic) {\n        this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isDeclareContext && this.match(types.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) == null ? void 0 : _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) == null ? void 0 : _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) == null ? void 0 : _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) == null ? void 0 : _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isDeclareContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInDeclareContext(cb) {\n    const oldIsDeclareContext = this.state.isDeclareContext;\n    this.state.isDeclareContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isDeclareContext = oldIsDeclareContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types._class);\n    }\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers == null ? void 0 : specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n    }\n\n    const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.isDeclareContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!(curContext == null ? void 0 : curContext.preserveSpace)) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    const override = curContext == null ? void 0 : curContext.override;\n\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types.braceHashL);\n      } else {\n        this.finishToken(types.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else {\n      this.finishOp(types.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types.name) || !!this.state.type.keyword || this.match(types.string) || this.match(types.num) || this.match(types.bigint) || this.match(types.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser == null ? void 0 : parser.options.ranges) this.range = [pos, 0];\n    if (parser == null ? void 0 : parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || ((_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized)) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && ((_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma)) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObjectLike(types.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, message) {\n    this.errors.set(pos, message);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, message);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, message);\n  }\n\n  recordParenthesizedIdentifierError(pos, message) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, message);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, message);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, message) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, message);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((message, pos) => {\n      this.raise(pos, message);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        if (op === types.exponent && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n        }\n\n        const logical = op === types.logicalOR || op === types.logicalAND;\n        const coalesce = op === types.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types.logicalOR || nextOp === types.logicalAND) || logical && nextOp === types.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      return this.parseAwait(startPos, startLoc);\n    }\n\n    const update = this.match(types.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary();\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types.bracketL) || this.eat(types.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed ? this.parseExpression() : this.parseMaybePrivateName(true);\n\n    if (this.isPrivateName(property)) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.getPrivateNameSV(property), property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (let _i = 0, _node$arguments = node.arguments; _i < _node$arguments.length; _i++) {\n          const arg = _node$arguments[_i];\n\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        return this.parseSuper();\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types$1.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types$1.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types.name)) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            }\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          return this.parseDo();\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketBarL:\n      case types.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types.bracketBarL ? types.bracketBarR : types.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types.bracketL:\n        {\n          return this.parseArrayLike(types.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types.braceBarL:\n      case types.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types.braceBarL ? types.braceBarR : types.braceR, false, true, refExpressionErrors);\n        }\n\n      case types.braceL:\n        {\n          return this.parseObjectLike(types.braceR, false, false, refExpressionErrors);\n        }\n\n      case types._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNewOrNewTarget();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n\n          const nextCh = this.input.codePointAt(this.state.end);\n\n          if (isIdentifierStart(nextCh) || nextCh === 92) {\n            const start = this.state.start;\n            node = this.parseMaybePrivateName(true);\n\n            if (this.match(types._in)) {\n              this.expectPlugin(\"privateIn\");\n              this.classScope.usePrivateName(node.id.name, node.start);\n            } else if (this.hasPlugin(\"privateIn\")) {\n              this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, node.id.name);\n            } else {\n              throw this.unexpected(start);\n            }\n\n            return node;\n          }\n        }\n\n      case types.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo() {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(id.start, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        }, ErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = ErrorMessages.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types.bracketL) || this.match(types.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) || this.match(types.bigint) || this.match(types.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (!this.isPrivateName(prop.key)) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (let _i2 = 0, _node$params = node.params; _i2 < _node$params.length; _i2++) {\n      const param = _node$params[_i2];\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types._class || type === types._function) && (curContext === types$1.functionStatement || curContext === types$1.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(node.start, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      }, ErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, true);\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n      hadStaticBlock: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types.braceL)) {\n        this.parseClassStaticBlock(classBody, member, state);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = this.isPrivateName(key);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassElementName(publicMethod);\n\n      if (this.isPrivateName(method.key)) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const key = this.parsePropertyName(member, true);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, ErrorMessages.StaticPrototype);\n    }\n\n    if (this.isPrivateName(key) && this.getPrivateNameSV(key) === \"constructor\") {\n      this.raise(key.start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(classBody, member, state) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if (state.hadStaticBlock) {\n      this.raise(member.start, ErrorMessages.DuplicateStaticBlock);\n    }\n\n    if ((_member$decorators = member.decorators) == null ? void 0 : _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n\n    state.hadStaticBlock = true;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation || this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types.name && l.value !== \"from\" || l.type === types.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) == null ? void 0 : _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n          const specifier = _node$specifiers[_i3];\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type === \"StringLiteral\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n            const declaration = _node$declaration$dec[_i4];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n        const prop = _node$properties[_i5];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n        const elem = _node$elements[_i6];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral(this.state.value, \"StringLiteral\");\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n        const attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types.string)) {\n        node.key = this.parseLiteral(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types.colon);\n\n      if (!this.match(types.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (let _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n      const [name, pos] = _Array$from[_i];\n\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (let _i2 = 0, _this$stack = this.stack; _i2 < _this$stack.length; _i2++) {\n      classScope = _this$stack[_i2];\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options == null ? void 0 : options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n//# sourceMappingURL=index.js.map\n"],"sourceRoot":""}