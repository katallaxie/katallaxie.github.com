directive @mark(
  """Marks if field is localized"""
  localized: Boolean

  """Marks if value is default"""
  default: Boolean

  """Marks if the locale is a part of the default fallback"""
  fallback: Boolean

  """Ordered list of fallback locales"""
  fallbackLocales: [String!]

  """Marks the pageInfo"""
  pageInfo: Boolean

  """Marks an aggregate type"""
  aggregate: Boolean

  """Marks a countable type"""
  countable: Boolean

  """Marks an edge type"""
  edge: Boolean

  """Marks a locale enum"""
  locale: Boolean

  """Marks asset url handler"""
  url: Boolean

  """Marks type of mutation kind"""
  mutationKind: _MutationKind

  """Marks kind of mutation input field"""
  mutationInputFieldKind: _MutationInputFieldKind

  """Marks filter and links to parent type"""
  filter: String

  """Marks filter kind"""
  filterKind: _FilterKind

  """Marks if corresponding field is list"""
  filterIsList: Boolean

  """Marks order by"""
  order: Boolean

  """Marks order direction"""
  orderDirection: _OrderDirection

  """Link to the Main type of the connection"""
  connection: String

  """Marks localizations field"""
  localizations: Boolean

  """Marks versions field on model"""
  modelVersions: Boolean

  """Marks document version field on Query"""
  documentVersion: Boolean

  """Marks stages field"""
  stages: Boolean

  """Specifies system createdAt field"""
  createdAtField: String

  """Specifies system updatedAt field"""
  updatedAtField: String

  """Specifies relation input kind"""
  relationInputKind: _RelationInputKind

  """
  Specifies relation kind (e.g. union relation or regular field relation)
  """
  relationKind: _RelationKind

  """Specifies relation input cardinality"""
  relationInputCardinality: _RelationInputCardinality

  """Specifies relation input cardinality of reverse side"""
  reverseRelationInputCardinality: _RelationInputCardinality

  """Specifies model create input type"""
  createInputType: String

  """Specifies model create localization type"""
  createLocalizationInputType: String

  """Specifies GraphCMS field type"""
  fieldType: String

  """Specifies WhereUniqueInput type name"""
  whereUniqueInput: String

  """Specifies whether type is connect input"""
  isConnectInput: Boolean

  """
  Specifies relation input to be for abstract member type, not known master / origin side
  """
  isMemberInput: Boolean

  """Specifies union type name"""
  unionType: Boolean

  """Specifies model a type is part of"""
  model: String

  """Specifies mode of system DateTime fields"""
  systemDateTimeFieldVariation: _SystemDateTimeFieldVariation

  """
  If versioned, documents of this model will be able to hold this amount of versions per stage
  """
  versionRetentionCount: Int

  """If versioned, on publishing versions older than x days will be dropped"""
  versionRetentionPeriod: Int

  """Adds field validations"""
  validations: String

  """The model's storage ID"""
  storageId: String

  """Marks richText field return type"""
  isRichTextType: Boolean

  """Marks list richText field return type"""
  isListRichText: Boolean

  """The name of the associated RichText type"""
  richTextType: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | ENUM | INPUT_FIELD_DEFINITION | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @permission(
  """Policy resource names."""
  resources: [String!]

  """Policy action names."""
  actions: [String!]
) on FIELD_DEFINITION

directive @psql(
  """postgres table name"""
  table: String

  """postgres localization table name"""
  localizationTable: String

  """postgres column name"""
  column: [String!]

  """hardcoded postgres id value for enums"""
  id: String

  """postgres join on name"""
  join: [String!]

  """Specifies column for system id field"""
  idColumn: String

  """Specifies column for native sorting for relational fields"""
  prio: String

  """Specifies columns for union member fields"""
  memberColumns: [String!]

  """Specifies system updatedAt column"""
  updatedAtColumn: String
) on OBJECT | FIELD_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION | ENUM | INPUT_OBJECT | ARGUMENT_DEFINITION

directive @remote(
  """url to fetch the remote content from"""
  url: String!

  """HTTP method used to fetch the remote content from"""
  method: String!

  """optional headers that will be sent in the remote call"""
  headers: Json

  """list of field apiIds that should be send as payload in the remote call"""
  requestParamFields: [String!]!

  """
  list of field storage ids that will available for templates and parameters for the remote call
  """
  payloadFields: [String!]!
) on FIELD_DEFINITION

""""""
type Aggregate {
  count: Int!
}

""""""
type Article implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Article!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """List of Article versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge!]!
  aggregate: Aggregate!
}

""""""
input ArticleCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge."""
  node: Article!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input ArticleManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ArticleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
}

""""""
enum ArticleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

""""""
input ArticleUpdateInput {
  """No fields in update input"""
  _: String
}

""""""
input ArticleUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

""""""
input ArticleUpdateManyWithNestedWhereInput {
  """Document search"""
  where: ArticleWhereInput!

  """Update many input"""
  data: ArticleUpdateManyInput!
}

""""""
input ArticleUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ArticleWhereUniqueInput!

  """Document to update"""
  data: ArticleUpdateInput!
}

""""""
input ArticleUpsertInput {
  """Create document if it didn't exist"""
  create: ArticleCreateInput!

  """Update document if it exists"""
  update: ArticleUpdateInput!
}

""""""
input ArticleUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: ArticleWhereUniqueInput!

  """Upsert data"""
  data: ArticleUpsertInput!
}

"""Identifies documents"""
input ArticleWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [ArticleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
}

"""References Article record uniquely"""
input ArticleWhereUniqueInput {
  id: ID
}

"""Asset system model"""
type Asset implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Asset!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Asset!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """The file handle"""
  handle: String!

  """The file name"""
  fileName: String!

  """The height of the file"""
  height: Float

  """The file width"""
  width: Float

  """The file size"""
  size: Float

  """The mime type of the file"""
  mimeType: String

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}

""""""
input AssetCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
}

""""""
input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}

""""""
input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

""""""
input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
}

""""""
enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

""""""
input AssetUpdateInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
}

""""""
input AssetUpdateLocalizationDataInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

""""""
input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

""""""
input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

""""""
input AssetUpdateManyInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
}

""""""
input AssetUpdateManyLocalizationDataInput {
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
}

""""""
input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

""""""
input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

""""""
input AssetUpdateManyWithNestedWhereInput {
  """Document search"""
  where: AssetWhereInput!

  """Update many input"""
  data: AssetUpdateManyInput!
}

""""""
input AssetUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Document to update"""
  data: AssetUpdateInput!
}

""""""
input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

""""""
input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}

""""""
input AssetUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: AssetWhereUniqueInput!

  """Upsert data"""
  data: AssetUpsertInput!
}

"""Identifies documents"""
input AssetWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  handle: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values that are contained in given list."""
  handle_in: [String!]

  """All values that are not contained in given list."""
  handle_not_in: [String!]

  """All values containing the given string."""
  handle_contains: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values starting with the given string."""
  handle_starts_with: String

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values not ending with the given string"""
  handle_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values that are not contained in given list."""
  height_not_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values that are not contained in given list."""
  width_not_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

""""""
type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}

""""""
input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at first position"""
  start: Boolean

  """Connect document at last position"""
  end: Boolean
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

""""""
enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}

""""""
input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

""""""
type DocumentVersion {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
  data: Json
}

""""""
type Form implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Form!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  page(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `page` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Page
  fields(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `fields` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes!]!
  submissions(
    where: SubmissionWhereInput
    orderBy: SubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `submissions` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): [Submission!]!

  """List of Form versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
type FormCheckbox implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [FormCheckbox!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form

  """List of FormCheckbox versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input FormCheckboxConnectInput {
  """Document to connect"""
  where: FormCheckboxWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormCheckboxConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormCheckboxEdge!]!
  aggregate: Aggregate!
}

""""""
input FormCheckboxCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  form: FormCreateOneInlineInput
}

""""""
input FormCheckboxCreateManyInlineInput {
  """Create and connect multiple existing FormCheckbox documents"""
  create: [FormCheckboxCreateInput!]

  """Connect multiple existing FormCheckbox documents"""
  connect: [FormCheckboxWhereUniqueInput!]
}

""""""
input FormCheckboxCreateOneInlineInput {
  """Create and connect one FormCheckbox document"""
  create: FormCheckboxCreateInput

  """Connect one existing FormCheckbox document"""
  connect: FormCheckboxWhereUniqueInput
}

"""An edge in a connection."""
type FormCheckboxEdge {
  """The item at the end of the edge."""
  node: FormCheckbox!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FormCheckboxManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormCheckboxWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormCheckboxWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormCheckboxWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

""""""
enum FormCheckboxOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

""""""
input FormCheckboxUpdateInput {
  form: FormUpdateOneInlineInput
}

""""""
input FormCheckboxUpdateManyInlineInput {
  """Create and connect multiple FormCheckbox documents"""
  create: [FormCheckboxCreateInput!]

  """Connect multiple existing FormCheckbox documents"""
  connect: [FormCheckboxConnectInput!]

  """
  Override currently-connected documents with multiple existing FormCheckbox documents
  """
  set: [FormCheckboxWhereUniqueInput!]

  """Update multiple FormCheckbox documents"""
  update: [FormCheckboxUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple FormCheckbox documents"""
  upsert: [FormCheckboxUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple FormCheckbox documents"""
  disconnect: [FormCheckboxWhereUniqueInput!]

  """Delete multiple FormCheckbox documents"""
  delete: [FormCheckboxWhereUniqueInput!]
}

""""""
input FormCheckboxUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

""""""
input FormCheckboxUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormCheckboxWhereInput!

  """Update many input"""
  data: FormCheckboxUpdateManyInput!
}

""""""
input FormCheckboxUpdateOneInlineInput {
  """Create and connect one FormCheckbox document"""
  create: FormCheckboxCreateInput

  """Update single FormCheckbox document"""
  update: FormCheckboxUpdateWithNestedWhereUniqueInput

  """Upsert single FormCheckbox document"""
  upsert: FormCheckboxUpsertWithNestedWhereUniqueInput

  """Connect existing FormCheckbox document"""
  connect: FormCheckboxWhereUniqueInput

  """Disconnect currently connected FormCheckbox document"""
  disconnect: Boolean

  """Delete currently connected FormCheckbox document"""
  delete: Boolean
}

""""""
input FormCheckboxUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormCheckboxWhereUniqueInput!

  """Document to update"""
  data: FormCheckboxUpdateInput!
}

""""""
input FormCheckboxUpsertInput {
  """Create document if it didn't exist"""
  create: FormCheckboxCreateInput!

  """Update document if it exists"""
  update: FormCheckboxUpdateInput!
}

""""""
input FormCheckboxUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormCheckboxWhereUniqueInput!

  """Upsert data"""
  data: FormCheckboxUpsertInput!
}

"""Identifies documents"""
input FormCheckboxWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormCheckboxWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormCheckboxWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormCheckboxWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

"""References FormCheckbox record uniquely"""
input FormCheckboxWhereUniqueInput {
  id: ID
}

""""""
input FormConnectInput {
  """Document to connect"""
  where: FormWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormEdge!]!
  aggregate: Aggregate!
}

""""""
input FormCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  page: PageCreateOneInlineInput
  fields: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateManyInlineInput
  submissions: SubmissionCreateManyInlineInput
}

""""""
input FormCreateManyInlineInput {
  """Create and connect multiple existing Form documents"""
  create: [FormCreateInput!]

  """Connect multiple existing Form documents"""
  connect: [FormWhereUniqueInput!]
}

""""""
input FormCreateOneInlineInput {
  """Create and connect one Form document"""
  create: FormCreateInput

  """Connect one existing Form document"""
  connect: FormWhereUniqueInput
}

"""An edge in a connection."""
type FormEdge {
  """The item at the end of the edge."""
  node: Form!

  """A cursor for use in pagination."""
  cursor: String!
}

""""""
union FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes = FormCheckbox | FormInput | FormOption | FormSelect | FormTextarea

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesConnectInput {
  FormInput: FormInputConnectInput
  FormTextarea: FormTextareaConnectInput
  FormSelect: FormSelectConnectInput
  FormOption: FormOptionConnectInput
  FormCheckbox: FormCheckboxConnectInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateInput {
  FormInput: FormInputCreateInput
  FormTextarea: FormTextareaCreateInput
  FormSelect: FormSelectCreateInput
  FormOption: FormOptionCreateInput
  FormCheckbox: FormCheckboxCreateInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateManyInlineInput {
  """
  Create and connect multiple existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  create: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateInput!]

  """
  Connect multiple existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  connect: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput!]
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateOneInlineInput {
  """
  Create and connect one FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  create: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateInput

  """
  Connect one existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  connect: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateInput {
  FormInput: FormInputUpdateInput
  FormTextarea: FormTextareaUpdateInput
  FormSelect: FormSelectUpdateInput
  FormOption: FormOptionUpdateInput
  FormCheckbox: FormCheckboxUpdateInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateManyInlineInput {
  """
  Create and connect multiple FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  create: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateInput!]

  """
  Connect multiple existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  connect: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesConnectInput!]

  """
  Override currently-connected documents with multiple existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  set: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput!]

  """
  Update multiple FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  update: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateWithNestedWhereUniqueInput!]

  """
  Upsert multiple FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  upsert: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpsertWithNestedWhereUniqueInput!]

  """
  Disconnect multiple FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  disconnect: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput!]

  """
  Delete multiple FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes documents
  """
  delete: [FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput!]
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateManyWithNestedWhereInput {
  FormInput: FormInputUpdateManyWithNestedWhereInput
  FormTextarea: FormTextareaUpdateManyWithNestedWhereInput
  FormSelect: FormSelectUpdateManyWithNestedWhereInput
  FormOption: FormOptionUpdateManyWithNestedWhereInput
  FormCheckbox: FormCheckboxUpdateManyWithNestedWhereInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateOneInlineInput {
  """
  Create and connect one FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  create: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesCreateInput

  """
  Update single FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  update: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateWithNestedWhereUniqueInput

  """
  Upsert single FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  upsert: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpsertWithNestedWhereUniqueInput

  """
  Connect existing FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  connect: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput

  """
  Disconnect currently connected FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  disconnect: Boolean

  """
  Delete currently connected FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxes document
  """
  delete: Boolean
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateWithNestedWhereUniqueInput {
  FormInput: FormInputUpdateWithNestedWhereUniqueInput
  FormTextarea: FormTextareaUpdateWithNestedWhereUniqueInput
  FormSelect: FormSelectUpdateWithNestedWhereUniqueInput
  FormOption: FormOptionUpdateWithNestedWhereUniqueInput
  FormCheckbox: FormCheckboxUpdateWithNestedWhereUniqueInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpsertWithNestedWhereUniqueInput {
  FormInput: FormInputUpsertWithNestedWhereUniqueInput
  FormTextarea: FormTextareaUpsertWithNestedWhereUniqueInput
  FormSelect: FormSelectUpsertWithNestedWhereUniqueInput
  FormOption: FormOptionUpsertWithNestedWhereUniqueInput
  FormCheckbox: FormCheckboxUpsertWithNestedWhereUniqueInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereInput {
  FormInput: FormInputWhereInput
  FormTextarea: FormTextareaWhereInput
  FormSelect: FormSelectWhereInput
  FormOption: FormOptionWhereInput
  FormCheckbox: FormCheckboxWhereInput
}

""""""
input FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesWhereUniqueInput {
  FormInput: FormInputWhereUniqueInput
  FormTextarea: FormTextareaWhereUniqueInput
  FormSelect: FormSelectWhereUniqueInput
  FormOption: FormOptionWhereUniqueInput
  FormCheckbox: FormCheckboxWhereUniqueInput
}

""""""
type FormInput implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [FormInput!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form
  name: String
  type: FormInputType
  placeholder: String
  required: Boolean!
  label: String
  rules: Json

  """List of FormInput versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input FormInputConnectInput {
  """Document to connect"""
  where: FormInputWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormInputConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormInputEdge!]!
  aggregate: Aggregate!
}

""""""
input FormInputCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  form: FormCreateOneInlineInput
  name: String
  type: FormInputType
  placeholder: String
  required: Boolean!
  label: String
  rules: Json
}

""""""
input FormInputCreateManyInlineInput {
  """Create and connect multiple existing FormInput documents"""
  create: [FormInputCreateInput!]

  """Connect multiple existing FormInput documents"""
  connect: [FormInputWhereUniqueInput!]
}

""""""
input FormInputCreateOneInlineInput {
  """Create and connect one FormInput document"""
  create: FormInputCreateInput

  """Connect one existing FormInput document"""
  connect: FormInputWhereUniqueInput
}

"""An edge in a connection."""
type FormInputEdge {
  """The item at the end of the edge."""
  node: FormInput!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FormInputManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormInputWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormInputWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormInputWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  type: FormInputType

  """All values that are not equal to given value."""
  type_not: FormInputType

  """All values that are contained in given list."""
  type_in: [FormInputType!]

  """All values that are not contained in given list."""
  type_not_in: [FormInputType!]
  placeholder: String

  """All values that are not equal to given value."""
  placeholder_not: String

  """All values that are contained in given list."""
  placeholder_in: [String!]

  """All values that are not contained in given list."""
  placeholder_not_in: [String!]

  """All values containing the given string."""
  placeholder_contains: String

  """All values not containing the given string."""
  placeholder_not_contains: String

  """All values starting with the given string."""
  placeholder_starts_with: String

  """All values not starting with the given string."""
  placeholder_not_starts_with: String

  """All values ending with the given string."""
  placeholder_ends_with: String

  """All values not ending with the given string"""
  placeholder_not_ends_with: String
  required: Boolean

  """All values that are not equal to given value."""
  required_not: Boolean
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string"""
  label_not_ends_with: String
}

""""""
enum FormInputOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  placeholder_ASC
  placeholder_DESC
  required_ASC
  required_DESC
  label_ASC
  label_DESC
}

""""""
enum FormInputType {
  EMAIL
  TEL
  TEXT
}

""""""
input FormInputUpdateInput {
  form: FormUpdateOneInlineInput
  name: String
  type: FormInputType
  placeholder: String
  required: Boolean
  label: String
  rules: Json
}

""""""
input FormInputUpdateManyInlineInput {
  """Create and connect multiple FormInput documents"""
  create: [FormInputCreateInput!]

  """Connect multiple existing FormInput documents"""
  connect: [FormInputConnectInput!]

  """
  Override currently-connected documents with multiple existing FormInput documents
  """
  set: [FormInputWhereUniqueInput!]

  """Update multiple FormInput documents"""
  update: [FormInputUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple FormInput documents"""
  upsert: [FormInputUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple FormInput documents"""
  disconnect: [FormInputWhereUniqueInput!]

  """Delete multiple FormInput documents"""
  delete: [FormInputWhereUniqueInput!]
}

""""""
input FormInputUpdateManyInput {
  name: String
  type: FormInputType
  placeholder: String
  required: Boolean
  label: String
  rules: Json
}

""""""
input FormInputUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormInputWhereInput!

  """Update many input"""
  data: FormInputUpdateManyInput!
}

""""""
input FormInputUpdateOneInlineInput {
  """Create and connect one FormInput document"""
  create: FormInputCreateInput

  """Update single FormInput document"""
  update: FormInputUpdateWithNestedWhereUniqueInput

  """Upsert single FormInput document"""
  upsert: FormInputUpsertWithNestedWhereUniqueInput

  """Connect existing FormInput document"""
  connect: FormInputWhereUniqueInput

  """Disconnect currently connected FormInput document"""
  disconnect: Boolean

  """Delete currently connected FormInput document"""
  delete: Boolean
}

""""""
input FormInputUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormInputWhereUniqueInput!

  """Document to update"""
  data: FormInputUpdateInput!
}

""""""
input FormInputUpsertInput {
  """Create document if it didn't exist"""
  create: FormInputCreateInput!

  """Update document if it exists"""
  update: FormInputUpdateInput!
}

""""""
input FormInputUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormInputWhereUniqueInput!

  """Upsert data"""
  data: FormInputUpsertInput!
}

"""Identifies documents"""
input FormInputWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormInputWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormInputWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormInputWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  type: FormInputType

  """All values that are not equal to given value."""
  type_not: FormInputType

  """All values that are contained in given list."""
  type_in: [FormInputType!]

  """All values that are not contained in given list."""
  type_not_in: [FormInputType!]
  placeholder: String

  """All values that are not equal to given value."""
  placeholder_not: String

  """All values that are contained in given list."""
  placeholder_in: [String!]

  """All values that are not contained in given list."""
  placeholder_not_in: [String!]

  """All values containing the given string."""
  placeholder_contains: String

  """All values not containing the given string."""
  placeholder_not_contains: String

  """All values starting with the given string."""
  placeholder_starts_with: String

  """All values not starting with the given string."""
  placeholder_not_starts_with: String

  """All values ending with the given string."""
  placeholder_ends_with: String

  """All values not ending with the given string"""
  placeholder_not_ends_with: String
  required: Boolean

  """All values that are not equal to given value."""
  required_not: Boolean
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string"""
  label_not_ends_with: String
}

"""References FormInput record uniquely"""
input FormInputWhereUniqueInput {
  id: ID
}

"""Identifies documents"""
input FormManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  page: PageWhereInput
  submissions_every: SubmissionWhereInput
  submissions_some: SubmissionWhereInput
  submissions_none: SubmissionWhereInput
}

""""""
type FormOption implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [FormOption!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form
  formSelect(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `formSelect` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): FormSelect
  value: String!
  option: String

  """List of FormOption versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input FormOptionConnectInput {
  """Document to connect"""
  where: FormOptionWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormOptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormOptionEdge!]!
  aggregate: Aggregate!
}

""""""
input FormOptionCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  form: FormCreateOneInlineInput
  formSelect: FormSelectCreateOneInlineInput
  value: String!
  option: String
}

""""""
input FormOptionCreateManyInlineInput {
  """Create and connect multiple existing FormOption documents"""
  create: [FormOptionCreateInput!]

  """Connect multiple existing FormOption documents"""
  connect: [FormOptionWhereUniqueInput!]
}

""""""
input FormOptionCreateOneInlineInput {
  """Create and connect one FormOption document"""
  create: FormOptionCreateInput

  """Connect one existing FormOption document"""
  connect: FormOptionWhereUniqueInput
}

"""An edge in a connection."""
type FormOptionEdge {
  """The item at the end of the edge."""
  node: FormOption!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FormOptionManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  formSelect: FormSelectWhereInput
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string"""
  value_not_ends_with: String
  option: String

  """All values that are not equal to given value."""
  option_not: String

  """All values that are contained in given list."""
  option_in: [String!]

  """All values that are not contained in given list."""
  option_not_in: [String!]

  """All values containing the given string."""
  option_contains: String

  """All values not containing the given string."""
  option_not_contains: String

  """All values starting with the given string."""
  option_starts_with: String

  """All values not starting with the given string."""
  option_not_starts_with: String

  """All values ending with the given string."""
  option_ends_with: String

  """All values not ending with the given string"""
  option_not_ends_with: String
}

""""""
enum FormOptionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  value_ASC
  value_DESC
  option_ASC
  option_DESC
}

""""""
input FormOptionUpdateInput {
  form: FormUpdateOneInlineInput
  formSelect: FormSelectUpdateOneInlineInput
  value: String
  option: String
}

""""""
input FormOptionUpdateManyInlineInput {
  """Create and connect multiple FormOption documents"""
  create: [FormOptionCreateInput!]

  """Connect multiple existing FormOption documents"""
  connect: [FormOptionConnectInput!]

  """
  Override currently-connected documents with multiple existing FormOption documents
  """
  set: [FormOptionWhereUniqueInput!]

  """Update multiple FormOption documents"""
  update: [FormOptionUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple FormOption documents"""
  upsert: [FormOptionUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple FormOption documents"""
  disconnect: [FormOptionWhereUniqueInput!]

  """Delete multiple FormOption documents"""
  delete: [FormOptionWhereUniqueInput!]
}

""""""
input FormOptionUpdateManyInput {
  value: String
  option: String
}

""""""
input FormOptionUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormOptionWhereInput!

  """Update many input"""
  data: FormOptionUpdateManyInput!
}

""""""
input FormOptionUpdateOneInlineInput {
  """Create and connect one FormOption document"""
  create: FormOptionCreateInput

  """Update single FormOption document"""
  update: FormOptionUpdateWithNestedWhereUniqueInput

  """Upsert single FormOption document"""
  upsert: FormOptionUpsertWithNestedWhereUniqueInput

  """Connect existing FormOption document"""
  connect: FormOptionWhereUniqueInput

  """Disconnect currently connected FormOption document"""
  disconnect: Boolean

  """Delete currently connected FormOption document"""
  delete: Boolean
}

""""""
input FormOptionUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormOptionWhereUniqueInput!

  """Document to update"""
  data: FormOptionUpdateInput!
}

""""""
input FormOptionUpsertInput {
  """Create document if it didn't exist"""
  create: FormOptionCreateInput!

  """Update document if it exists"""
  update: FormOptionUpdateInput!
}

""""""
input FormOptionUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormOptionWhereUniqueInput!

  """Upsert data"""
  data: FormOptionUpsertInput!
}

"""Identifies documents"""
input FormOptionWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  formSelect: FormSelectWhereInput
  value: String

  """All values that are not equal to given value."""
  value_not: String

  """All values that are contained in given list."""
  value_in: [String!]

  """All values that are not contained in given list."""
  value_not_in: [String!]

  """All values containing the given string."""
  value_contains: String

  """All values not containing the given string."""
  value_not_contains: String

  """All values starting with the given string."""
  value_starts_with: String

  """All values not starting with the given string."""
  value_not_starts_with: String

  """All values ending with the given string."""
  value_ends_with: String

  """All values not ending with the given string"""
  value_not_ends_with: String
  option: String

  """All values that are not equal to given value."""
  option_not: String

  """All values that are contained in given list."""
  option_in: [String!]

  """All values that are not contained in given list."""
  option_not_in: [String!]

  """All values containing the given string."""
  option_contains: String

  """All values not containing the given string."""
  option_not_contains: String

  """All values starting with the given string."""
  option_starts_with: String

  """All values not starting with the given string."""
  option_not_starts_with: String

  """All values ending with the given string."""
  option_ends_with: String

  """All values not ending with the given string"""
  option_not_ends_with: String
}

"""References FormOption record uniquely"""
input FormOptionWhereUniqueInput {
  id: ID
}

""""""
enum FormOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

""""""
type FormSelect implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [FormSelect!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form
  options(
    where: FormOptionWhereInput
    orderBy: FormOptionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `options` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): [FormOption!]!
  label: String
  name: String
  required: Boolean!
  rules: Json
  placeholder: String

  """List of FormSelect versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input FormSelectConnectInput {
  """Document to connect"""
  where: FormSelectWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormSelectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormSelectEdge!]!
  aggregate: Aggregate!
}

""""""
input FormSelectCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  form: FormCreateOneInlineInput
  options: FormOptionCreateManyInlineInput
  label: String
  name: String
  required: Boolean!
  rules: Json
  placeholder: String
}

""""""
input FormSelectCreateManyInlineInput {
  """Create and connect multiple existing FormSelect documents"""
  create: [FormSelectCreateInput!]

  """Connect multiple existing FormSelect documents"""
  connect: [FormSelectWhereUniqueInput!]
}

""""""
input FormSelectCreateOneInlineInput {
  """Create and connect one FormSelect document"""
  create: FormSelectCreateInput

  """Connect one existing FormSelect document"""
  connect: FormSelectWhereUniqueInput
}

"""An edge in a connection."""
type FormSelectEdge {
  """The item at the end of the edge."""
  node: FormSelect!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FormSelectManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormSelectWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormSelectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormSelectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  options_every: FormOptionWhereInput
  options_some: FormOptionWhereInput
  options_none: FormOptionWhereInput
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string"""
  label_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  required: Boolean

  """All values that are not equal to given value."""
  required_not: Boolean
  placeholder: String

  """All values that are not equal to given value."""
  placeholder_not: String

  """All values that are contained in given list."""
  placeholder_in: [String!]

  """All values that are not contained in given list."""
  placeholder_not_in: [String!]

  """All values containing the given string."""
  placeholder_contains: String

  """All values not containing the given string."""
  placeholder_not_contains: String

  """All values starting with the given string."""
  placeholder_starts_with: String

  """All values not starting with the given string."""
  placeholder_not_starts_with: String

  """All values ending with the given string."""
  placeholder_ends_with: String

  """All values not ending with the given string"""
  placeholder_not_ends_with: String
}

""""""
enum FormSelectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  label_ASC
  label_DESC
  name_ASC
  name_DESC
  required_ASC
  required_DESC
  placeholder_ASC
  placeholder_DESC
}

""""""
input FormSelectUpdateInput {
  form: FormUpdateOneInlineInput
  options: FormOptionUpdateManyInlineInput
  label: String
  name: String
  required: Boolean
  rules: Json
  placeholder: String
}

""""""
input FormSelectUpdateManyInlineInput {
  """Create and connect multiple FormSelect documents"""
  create: [FormSelectCreateInput!]

  """Connect multiple existing FormSelect documents"""
  connect: [FormSelectConnectInput!]

  """
  Override currently-connected documents with multiple existing FormSelect documents
  """
  set: [FormSelectWhereUniqueInput!]

  """Update multiple FormSelect documents"""
  update: [FormSelectUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple FormSelect documents"""
  upsert: [FormSelectUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple FormSelect documents"""
  disconnect: [FormSelectWhereUniqueInput!]

  """Delete multiple FormSelect documents"""
  delete: [FormSelectWhereUniqueInput!]
}

""""""
input FormSelectUpdateManyInput {
  label: String
  name: String
  required: Boolean
  rules: Json
  placeholder: String
}

""""""
input FormSelectUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormSelectWhereInput!

  """Update many input"""
  data: FormSelectUpdateManyInput!
}

""""""
input FormSelectUpdateOneInlineInput {
  """Create and connect one FormSelect document"""
  create: FormSelectCreateInput

  """Update single FormSelect document"""
  update: FormSelectUpdateWithNestedWhereUniqueInput

  """Upsert single FormSelect document"""
  upsert: FormSelectUpsertWithNestedWhereUniqueInput

  """Connect existing FormSelect document"""
  connect: FormSelectWhereUniqueInput

  """Disconnect currently connected FormSelect document"""
  disconnect: Boolean

  """Delete currently connected FormSelect document"""
  delete: Boolean
}

""""""
input FormSelectUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormSelectWhereUniqueInput!

  """Document to update"""
  data: FormSelectUpdateInput!
}

""""""
input FormSelectUpsertInput {
  """Create document if it didn't exist"""
  create: FormSelectCreateInput!

  """Update document if it exists"""
  update: FormSelectUpdateInput!
}

""""""
input FormSelectUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormSelectWhereUniqueInput!

  """Upsert data"""
  data: FormSelectUpsertInput!
}

"""Identifies documents"""
input FormSelectWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormSelectWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormSelectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormSelectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
  options_every: FormOptionWhereInput
  options_some: FormOptionWhereInput
  options_none: FormOptionWhereInput
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string"""
  label_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string"""
  name_not_ends_with: String
  required: Boolean

  """All values that are not equal to given value."""
  required_not: Boolean
  placeholder: String

  """All values that are not equal to given value."""
  placeholder_not: String

  """All values that are contained in given list."""
  placeholder_in: [String!]

  """All values that are not contained in given list."""
  placeholder_not_in: [String!]

  """All values containing the given string."""
  placeholder_contains: String

  """All values not containing the given string."""
  placeholder_not_contains: String

  """All values starting with the given string."""
  placeholder_starts_with: String

  """All values not starting with the given string."""
  placeholder_not_starts_with: String

  """All values ending with the given string."""
  placeholder_ends_with: String

  """All values not ending with the given string"""
  placeholder_not_ends_with: String
}

"""References FormSelect record uniquely"""
input FormSelectWhereUniqueInput {
  id: ID
}

""""""
type FormTextarea implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [FormTextarea!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form

  """List of FormTextarea versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input FormTextareaConnectInput {
  """Document to connect"""
  where: FormTextareaWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type FormTextareaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FormTextareaEdge!]!
  aggregate: Aggregate!
}

""""""
input FormTextareaCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  form: FormCreateOneInlineInput
}

""""""
input FormTextareaCreateManyInlineInput {
  """Create and connect multiple existing FormTextarea documents"""
  create: [FormTextareaCreateInput!]

  """Connect multiple existing FormTextarea documents"""
  connect: [FormTextareaWhereUniqueInput!]
}

""""""
input FormTextareaCreateOneInlineInput {
  """Create and connect one FormTextarea document"""
  create: FormTextareaCreateInput

  """Connect one existing FormTextarea document"""
  connect: FormTextareaWhereUniqueInput
}

"""An edge in a connection."""
type FormTextareaEdge {
  """The item at the end of the edge."""
  node: FormTextarea!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input FormTextareaManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormTextareaWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormTextareaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormTextareaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

""""""
enum FormTextareaOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

""""""
input FormTextareaUpdateInput {
  form: FormUpdateOneInlineInput
}

""""""
input FormTextareaUpdateManyInlineInput {
  """Create and connect multiple FormTextarea documents"""
  create: [FormTextareaCreateInput!]

  """Connect multiple existing FormTextarea documents"""
  connect: [FormTextareaConnectInput!]

  """
  Override currently-connected documents with multiple existing FormTextarea documents
  """
  set: [FormTextareaWhereUniqueInput!]

  """Update multiple FormTextarea documents"""
  update: [FormTextareaUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple FormTextarea documents"""
  upsert: [FormTextareaUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple FormTextarea documents"""
  disconnect: [FormTextareaWhereUniqueInput!]

  """Delete multiple FormTextarea documents"""
  delete: [FormTextareaWhereUniqueInput!]
}

""""""
input FormTextareaUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

""""""
input FormTextareaUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormTextareaWhereInput!

  """Update many input"""
  data: FormTextareaUpdateManyInput!
}

""""""
input FormTextareaUpdateOneInlineInput {
  """Create and connect one FormTextarea document"""
  create: FormTextareaCreateInput

  """Update single FormTextarea document"""
  update: FormTextareaUpdateWithNestedWhereUniqueInput

  """Upsert single FormTextarea document"""
  upsert: FormTextareaUpsertWithNestedWhereUniqueInput

  """Connect existing FormTextarea document"""
  connect: FormTextareaWhereUniqueInput

  """Disconnect currently connected FormTextarea document"""
  disconnect: Boolean

  """Delete currently connected FormTextarea document"""
  delete: Boolean
}

""""""
input FormTextareaUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormTextareaWhereUniqueInput!

  """Document to update"""
  data: FormTextareaUpdateInput!
}

""""""
input FormTextareaUpsertInput {
  """Create document if it didn't exist"""
  create: FormTextareaCreateInput!

  """Update document if it exists"""
  update: FormTextareaUpdateInput!
}

""""""
input FormTextareaUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormTextareaWhereUniqueInput!

  """Upsert data"""
  data: FormTextareaUpsertInput!
}

"""Identifies documents"""
input FormTextareaWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormTextareaWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormTextareaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormTextareaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

"""References FormTextarea record uniquely"""
input FormTextareaWhereUniqueInput {
  id: ID
}

""""""
input FormUpdateInput {
  page: PageUpdateOneInlineInput
  fields: FormFormInputsFormTextareasFormSelectsFormOptionsFormCheckboxesUpdateManyInlineInput
  submissions: SubmissionUpdateManyInlineInput
}

""""""
input FormUpdateManyInlineInput {
  """Create and connect multiple Form documents"""
  create: [FormCreateInput!]

  """Connect multiple existing Form documents"""
  connect: [FormConnectInput!]

  """
  Override currently-connected documents with multiple existing Form documents
  """
  set: [FormWhereUniqueInput!]

  """Update multiple Form documents"""
  update: [FormUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Form documents"""
  upsert: [FormUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Form documents"""
  disconnect: [FormWhereUniqueInput!]

  """Delete multiple Form documents"""
  delete: [FormWhereUniqueInput!]
}

""""""
input FormUpdateManyInput {
  """No fields in updateMany data input"""
  _: String
}

""""""
input FormUpdateManyWithNestedWhereInput {
  """Document search"""
  where: FormWhereInput!

  """Update many input"""
  data: FormUpdateManyInput!
}

""""""
input FormUpdateOneInlineInput {
  """Create and connect one Form document"""
  create: FormCreateInput

  """Update single Form document"""
  update: FormUpdateWithNestedWhereUniqueInput

  """Upsert single Form document"""
  upsert: FormUpsertWithNestedWhereUniqueInput

  """Connect existing Form document"""
  connect: FormWhereUniqueInput

  """Disconnect currently connected Form document"""
  disconnect: Boolean

  """Delete currently connected Form document"""
  delete: Boolean
}

""""""
input FormUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormWhereUniqueInput!

  """Document to update"""
  data: FormUpdateInput!
}

""""""
input FormUpsertInput {
  """Create document if it didn't exist"""
  create: FormCreateInput!

  """Update document if it exists"""
  update: FormUpdateInput!
}

""""""
input FormUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: FormWhereUniqueInput!

  """Upsert data"""
  data: FormUpsertInput!
}

"""Identifies documents"""
input FormWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [FormWhereInput!]

  """Logical OR on all given filters."""
  OR: [FormWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FormWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  page: PageWhereInput
  submissions_every: SubmissionWhereInput
  submissions_some: SubmissionWhereInput
  submissions_none: SubmissionWhereInput
}

"""References Form record uniquely"""
input FormWhereUniqueInput {
  id: ID
}

""""""
scalar Hex

""""""
enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.
  """
  scale

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.
  """
  max
}

""""""
input ImageResizeInput {
  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""Raw JSON value"""
scalar Json

"""Locale system enumeration"""
enum Locale {
  """System locale"""
  en
  de
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

""""""
type Mutation {
  """Create one article"""
  createArticle(data: ArticleCreateInput!): Article

  """Update one article"""
  updateArticle(where: ArticleWhereUniqueInput!, data: ArticleUpdateInput!): Article

  """
  Delete one article from _all_ existing stages. Returns deleted document.
  """
  deleteArticle(
    """Document to delete"""
    where: ArticleWhereUniqueInput!
  ): Article

  """Upsert one article"""
  upsertArticle(where: ArticleWhereUniqueInput!, upsert: ArticleUpsertInput!): Article

  """Publish one article"""
  publishArticle(
    """Document to publish"""
    where: ArticleWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Article

  """
  Unpublish one article from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishArticle(
    """Document to unpublish"""
    where: ArticleWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Article

  """Update many Article documents"""
  updateManyArticlesConnection(
    """Documents to apply update on"""
    where: ArticleManyWhereInput

    """Updates to document content"""
    data: ArticleUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ArticleConnection!

  """Delete many Article documents, return deleted documents"""
  deleteManyArticlesConnection(
    """Documents to delete"""
    where: ArticleManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ArticleConnection!

  """Publish many Article documents"""
  publishManyArticlesConnection(
    """Identifies documents in each stage to be published"""
    where: ArticleManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ArticleConnection!

  """
  Find many Article documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyArticlesConnection(
    """Identifies documents in draft stage"""
    where: ArticleManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): ArticleConnection!

  """Update many articles"""
  updateManyArticles(
    """Documents to apply update on"""
    where: ArticleManyWhereInput

    """Updates to document content"""
    data: ArticleUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyArticlesConnection)")

  """Delete many Article documents"""
  deleteManyArticles(
    """Documents to delete"""
    where: ArticleManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyArticlesConnection)")

  """Publish many Article documents"""
  publishManyArticles(
    """Identifies documents in each stage to be published"""
    where: ArticleManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyArticlesConnection)")

  """Unpublish many Article documents"""
  unpublishManyArticles(
    """Identifies documents in each stage"""
    where: ArticleManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyArticlesConnection)")

  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")

  """Update one asset"""
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Upsert one asset"""
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset

  """Publish one asset"""
  publishAsset(
    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Asset

  """
  Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishAsset(
    """Document to unpublish"""
    where: AssetWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Asset

  """Update many Asset documents"""
  updateManyAssetsConnection(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    """Documents to delete"""
    where: AssetManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): AssetConnection!

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): AssetConnection!

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    """Identifies documents in draft stage"""
    where: AssetManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): AssetConnection!

  """Update many assets"""
  updateManyAssets(
    """Documents to apply update on"""
    where: AssetManyWhereInput

    """Updates to document content"""
    data: AssetUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")

  """Publish many Asset documents"""
  publishManyAssets(
    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Identifies documents in each stage"""
    where: AssetManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")

  """Create one form"""
  createForm(data: FormCreateInput!): Form

  """Update one form"""
  updateForm(where: FormWhereUniqueInput!, data: FormUpdateInput!): Form

  """Delete one form from _all_ existing stages. Returns deleted document."""
  deleteForm(
    """Document to delete"""
    where: FormWhereUniqueInput!
  ): Form

  """Upsert one form"""
  upsertForm(where: FormWhereUniqueInput!, upsert: FormUpsertInput!): Form

  """Publish one form"""
  publishForm(
    """Document to publish"""
    where: FormWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Form

  """
  Unpublish one form from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishForm(
    """Document to unpublish"""
    where: FormWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Form

  """Update many Form documents"""
  updateManyFormsConnection(
    """Documents to apply update on"""
    where: FormManyWhereInput

    """Updates to document content"""
    data: FormUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormConnection!

  """Delete many Form documents, return deleted documents"""
  deleteManyFormsConnection(
    """Documents to delete"""
    where: FormManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormConnection!

  """Publish many Form documents"""
  publishManyFormsConnection(
    """Identifies documents in each stage to be published"""
    where: FormManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormConnection!

  """
  Find many Form documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormsConnection(
    """Identifies documents in draft stage"""
    where: FormManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormConnection!

  """Update many forms"""
  updateManyForms(
    """Documents to apply update on"""
    where: FormManyWhereInput

    """Updates to document content"""
    data: FormUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormsConnection)")

  """Delete many Form documents"""
  deleteManyForms(
    """Documents to delete"""
    where: FormManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormsConnection)")

  """Publish many Form documents"""
  publishManyForms(
    """Identifies documents in each stage to be published"""
    where: FormManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormsConnection)")

  """Unpublish many Form documents"""
  unpublishManyForms(
    """Identifies documents in each stage"""
    where: FormManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormsConnection)")

  """Create one formCheckbox"""
  createFormCheckbox(data: FormCheckboxCreateInput!): FormCheckbox

  """Update one formCheckbox"""
  updateFormCheckbox(where: FormCheckboxWhereUniqueInput!, data: FormCheckboxUpdateInput!): FormCheckbox

  """
  Delete one formCheckbox from _all_ existing stages. Returns deleted document.
  """
  deleteFormCheckbox(
    """Document to delete"""
    where: FormCheckboxWhereUniqueInput!
  ): FormCheckbox

  """Upsert one formCheckbox"""
  upsertFormCheckbox(where: FormCheckboxWhereUniqueInput!, upsert: FormCheckboxUpsertInput!): FormCheckbox

  """Publish one formCheckbox"""
  publishFormCheckbox(
    """Document to publish"""
    where: FormCheckboxWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): FormCheckbox

  """
  Unpublish one formCheckbox from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishFormCheckbox(
    """Document to unpublish"""
    where: FormCheckboxWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): FormCheckbox

  """Update many FormCheckbox documents"""
  updateManyFormCheckboxesConnection(
    """Documents to apply update on"""
    where: FormCheckboxManyWhereInput

    """Updates to document content"""
    data: FormCheckboxUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormCheckboxConnection!

  """Delete many FormCheckbox documents, return deleted documents"""
  deleteManyFormCheckboxesConnection(
    """Documents to delete"""
    where: FormCheckboxManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormCheckboxConnection!

  """Publish many FormCheckbox documents"""
  publishManyFormCheckboxesConnection(
    """Identifies documents in each stage to be published"""
    where: FormCheckboxManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormCheckboxConnection!

  """
  Find many FormCheckbox documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormCheckboxesConnection(
    """Identifies documents in draft stage"""
    where: FormCheckboxManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormCheckboxConnection!

  """Update many formCheckboxes"""
  updateManyFormCheckboxes(
    """Documents to apply update on"""
    where: FormCheckboxManyWhereInput

    """Updates to document content"""
    data: FormCheckboxUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormCheckboxesConnection)")

  """Delete many FormCheckbox documents"""
  deleteManyFormCheckboxes(
    """Documents to delete"""
    where: FormCheckboxManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormCheckboxesConnection)")

  """Publish many FormCheckbox documents"""
  publishManyFormCheckboxes(
    """Identifies documents in each stage to be published"""
    where: FormCheckboxManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormCheckboxesConnection)")

  """Unpublish many FormCheckbox documents"""
  unpublishManyFormCheckboxes(
    """Identifies documents in each stage"""
    where: FormCheckboxManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormCheckboxesConnection)")

  """Create one formInput"""
  createFormInput(data: FormInputCreateInput!): FormInput

  """Update one formInput"""
  updateFormInput(where: FormInputWhereUniqueInput!, data: FormInputUpdateInput!): FormInput

  """
  Delete one formInput from _all_ existing stages. Returns deleted document.
  """
  deleteFormInput(
    """Document to delete"""
    where: FormInputWhereUniqueInput!
  ): FormInput

  """Upsert one formInput"""
  upsertFormInput(where: FormInputWhereUniqueInput!, upsert: FormInputUpsertInput!): FormInput

  """Publish one formInput"""
  publishFormInput(
    """Document to publish"""
    where: FormInputWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): FormInput

  """
  Unpublish one formInput from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishFormInput(
    """Document to unpublish"""
    where: FormInputWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): FormInput

  """Update many FormInput documents"""
  updateManyFormInputsConnection(
    """Documents to apply update on"""
    where: FormInputManyWhereInput

    """Updates to document content"""
    data: FormInputUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormInputConnection!

  """Delete many FormInput documents, return deleted documents"""
  deleteManyFormInputsConnection(
    """Documents to delete"""
    where: FormInputManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormInputConnection!

  """Publish many FormInput documents"""
  publishManyFormInputsConnection(
    """Identifies documents in each stage to be published"""
    where: FormInputManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormInputConnection!

  """
  Find many FormInput documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormInputsConnection(
    """Identifies documents in draft stage"""
    where: FormInputManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormInputConnection!

  """Update many formInputs"""
  updateManyFormInputs(
    """Documents to apply update on"""
    where: FormInputManyWhereInput

    """Updates to document content"""
    data: FormInputUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormInputsConnection)")

  """Delete many FormInput documents"""
  deleteManyFormInputs(
    """Documents to delete"""
    where: FormInputManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormInputsConnection)")

  """Publish many FormInput documents"""
  publishManyFormInputs(
    """Identifies documents in each stage to be published"""
    where: FormInputManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormInputsConnection)")

  """Unpublish many FormInput documents"""
  unpublishManyFormInputs(
    """Identifies documents in each stage"""
    where: FormInputManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormInputsConnection)")

  """Create one formOption"""
  createFormOption(data: FormOptionCreateInput!): FormOption

  """Update one formOption"""
  updateFormOption(where: FormOptionWhereUniqueInput!, data: FormOptionUpdateInput!): FormOption

  """
  Delete one formOption from _all_ existing stages. Returns deleted document.
  """
  deleteFormOption(
    """Document to delete"""
    where: FormOptionWhereUniqueInput!
  ): FormOption

  """Upsert one formOption"""
  upsertFormOption(where: FormOptionWhereUniqueInput!, upsert: FormOptionUpsertInput!): FormOption

  """Publish one formOption"""
  publishFormOption(
    """Document to publish"""
    where: FormOptionWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): FormOption

  """
  Unpublish one formOption from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishFormOption(
    """Document to unpublish"""
    where: FormOptionWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): FormOption

  """Update many FormOption documents"""
  updateManyFormOptionsConnection(
    """Documents to apply update on"""
    where: FormOptionManyWhereInput

    """Updates to document content"""
    data: FormOptionUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormOptionConnection!

  """Delete many FormOption documents, return deleted documents"""
  deleteManyFormOptionsConnection(
    """Documents to delete"""
    where: FormOptionManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormOptionConnection!

  """Publish many FormOption documents"""
  publishManyFormOptionsConnection(
    """Identifies documents in each stage to be published"""
    where: FormOptionManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormOptionConnection!

  """
  Find many FormOption documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormOptionsConnection(
    """Identifies documents in draft stage"""
    where: FormOptionManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormOptionConnection!

  """Update many formOptions"""
  updateManyFormOptions(
    """Documents to apply update on"""
    where: FormOptionManyWhereInput

    """Updates to document content"""
    data: FormOptionUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormOptionsConnection)")

  """Delete many FormOption documents"""
  deleteManyFormOptions(
    """Documents to delete"""
    where: FormOptionManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormOptionsConnection)")

  """Publish many FormOption documents"""
  publishManyFormOptions(
    """Identifies documents in each stage to be published"""
    where: FormOptionManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormOptionsConnection)")

  """Unpublish many FormOption documents"""
  unpublishManyFormOptions(
    """Identifies documents in each stage"""
    where: FormOptionManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormOptionsConnection)")

  """Create one formSelect"""
  createFormSelect(data: FormSelectCreateInput!): FormSelect

  """Update one formSelect"""
  updateFormSelect(where: FormSelectWhereUniqueInput!, data: FormSelectUpdateInput!): FormSelect

  """
  Delete one formSelect from _all_ existing stages. Returns deleted document.
  """
  deleteFormSelect(
    """Document to delete"""
    where: FormSelectWhereUniqueInput!
  ): FormSelect

  """Upsert one formSelect"""
  upsertFormSelect(where: FormSelectWhereUniqueInput!, upsert: FormSelectUpsertInput!): FormSelect

  """Publish one formSelect"""
  publishFormSelect(
    """Document to publish"""
    where: FormSelectWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): FormSelect

  """
  Unpublish one formSelect from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishFormSelect(
    """Document to unpublish"""
    where: FormSelectWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): FormSelect

  """Update many FormSelect documents"""
  updateManyFormSelectsConnection(
    """Documents to apply update on"""
    where: FormSelectManyWhereInput

    """Updates to document content"""
    data: FormSelectUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormSelectConnection!

  """Delete many FormSelect documents, return deleted documents"""
  deleteManyFormSelectsConnection(
    """Documents to delete"""
    where: FormSelectManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormSelectConnection!

  """Publish many FormSelect documents"""
  publishManyFormSelectsConnection(
    """Identifies documents in each stage to be published"""
    where: FormSelectManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormSelectConnection!

  """
  Find many FormSelect documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormSelectsConnection(
    """Identifies documents in draft stage"""
    where: FormSelectManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormSelectConnection!

  """Update many formSelects"""
  updateManyFormSelects(
    """Documents to apply update on"""
    where: FormSelectManyWhereInput

    """Updates to document content"""
    data: FormSelectUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormSelectsConnection)")

  """Delete many FormSelect documents"""
  deleteManyFormSelects(
    """Documents to delete"""
    where: FormSelectManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormSelectsConnection)")

  """Publish many FormSelect documents"""
  publishManyFormSelects(
    """Identifies documents in each stage to be published"""
    where: FormSelectManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormSelectsConnection)")

  """Unpublish many FormSelect documents"""
  unpublishManyFormSelects(
    """Identifies documents in each stage"""
    where: FormSelectManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormSelectsConnection)")

  """Create one formTextarea"""
  createFormTextarea(data: FormTextareaCreateInput!): FormTextarea

  """Update one formTextarea"""
  updateFormTextarea(where: FormTextareaWhereUniqueInput!, data: FormTextareaUpdateInput!): FormTextarea

  """
  Delete one formTextarea from _all_ existing stages. Returns deleted document.
  """
  deleteFormTextarea(
    """Document to delete"""
    where: FormTextareaWhereUniqueInput!
  ): FormTextarea

  """Upsert one formTextarea"""
  upsertFormTextarea(where: FormTextareaWhereUniqueInput!, upsert: FormTextareaUpsertInput!): FormTextarea

  """Publish one formTextarea"""
  publishFormTextarea(
    """Document to publish"""
    where: FormTextareaWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): FormTextarea

  """
  Unpublish one formTextarea from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishFormTextarea(
    """Document to unpublish"""
    where: FormTextareaWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): FormTextarea

  """Update many FormTextarea documents"""
  updateManyFormTextareasConnection(
    """Documents to apply update on"""
    where: FormTextareaManyWhereInput

    """Updates to document content"""
    data: FormTextareaUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormTextareaConnection!

  """Delete many FormTextarea documents, return deleted documents"""
  deleteManyFormTextareasConnection(
    """Documents to delete"""
    where: FormTextareaManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormTextareaConnection!

  """Publish many FormTextarea documents"""
  publishManyFormTextareasConnection(
    """Identifies documents in each stage to be published"""
    where: FormTextareaManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormTextareaConnection!

  """
  Find many FormTextarea documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyFormTextareasConnection(
    """Identifies documents in draft stage"""
    where: FormTextareaManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): FormTextareaConnection!

  """Update many formTextareas"""
  updateManyFormTextareas(
    """Documents to apply update on"""
    where: FormTextareaManyWhereInput

    """Updates to document content"""
    data: FormTextareaUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyFormTextareasConnection)")

  """Delete many FormTextarea documents"""
  deleteManyFormTextareas(
    """Documents to delete"""
    where: FormTextareaManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyFormTextareasConnection)")

  """Publish many FormTextarea documents"""
  publishManyFormTextareas(
    """Identifies documents in each stage to be published"""
    where: FormTextareaManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyFormTextareasConnection)")

  """Unpublish many FormTextarea documents"""
  unpublishManyFormTextareas(
    """Identifies documents in each stage"""
    where: FormTextareaManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyFormTextareasConnection)")

  """Create one page"""
  createPage(data: PageCreateInput!): Page

  """Update one page"""
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page

  """Delete one page from _all_ existing stages. Returns deleted document."""
  deletePage(
    """Document to delete"""
    where: PageWhereUniqueInput!
  ): Page

  """Upsert one page"""
  upsertPage(where: PageWhereUniqueInput!, upsert: PageUpsertInput!): Page

  """Publish one page"""
  publishPage(
    """Document to publish"""
    where: PageWhereUniqueInput!

    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Page

  """
  Unpublish one page from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishPage(
    """Document to unpublish"""
    where: PageWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true
  ): Page

  """Update many Page documents"""
  updateManyPagesConnection(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Delete many Page documents, return deleted documents"""
  deleteManyPagesConnection(
    """Documents to delete"""
    where: PageManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): PageConnection!

  """Publish many Page documents"""
  publishManyPagesConnection(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): PageConnection!

  """
  Find many Page documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyPagesConnection(
    """Identifies documents in draft stage"""
    where: PageManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): PageConnection!

  """Update many pages"""
  updateManyPages(
    """Documents to apply update on"""
    where: PageManyWhereInput

    """Updates to document content"""
    data: PageUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPagesConnection)")

  """Delete many Page documents"""
  deleteManyPages(
    """Documents to delete"""
    where: PageManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPagesConnection)")

  """Publish many Page documents"""
  publishManyPages(
    """Identifies documents in each stage to be published"""
    where: PageManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPagesConnection)")

  """Unpublish many Page documents"""
  unpublishManyPages(
    """Identifies documents in each stage"""
    where: PageManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPagesConnection)")

  """Create one submission"""
  createSubmission(data: SubmissionCreateInput!): Submission

  """Update one submission"""
  updateSubmission(where: SubmissionWhereUniqueInput!, data: SubmissionUpdateInput!): Submission

  """
  Delete one submission from _all_ existing stages. Returns deleted document.
  """
  deleteSubmission(
    """Document to delete"""
    where: SubmissionWhereUniqueInput!
  ): Submission

  """Upsert one submission"""
  upsertSubmission(where: SubmissionWhereUniqueInput!, upsert: SubmissionUpsertInput!): Submission

  """Publish one submission"""
  publishSubmission(
    """Document to publish"""
    where: SubmissionWhereUniqueInput!

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]
  ): Submission

  """
  Unpublish one submission from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishSubmission(
    """Document to unpublish"""
    where: SubmissionWhereUniqueInput!

    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]
  ): Submission

  """Update many Submission documents"""
  updateManySubmissionsConnection(
    """Documents to apply update on"""
    where: SubmissionManyWhereInput

    """Updates to document content"""
    data: SubmissionUpdateManyInput!
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SubmissionConnection!

  """Delete many Submission documents, return deleted documents"""
  deleteManySubmissionsConnection(
    """Documents to delete"""
    where: SubmissionManyWhereInput
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SubmissionConnection!

  """Publish many Submission documents"""
  publishManySubmissionsConnection(
    """Identifies documents in each stage to be published"""
    where: SubmissionManyWhereInput

    """Stage to find matching documents in"""
    from: Stage = DRAFT

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SubmissionConnection!

  """
  Find many Submission documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManySubmissionsConnection(
    """Identifies documents in draft stage"""
    where: SubmissionManyWhereInput

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    skip: Int
    first: Int
    last: Int
    before: ID
    after: ID
  ): SubmissionConnection!

  """Update many submissions"""
  updateManySubmissions(
    """Documents to apply update on"""
    where: SubmissionManyWhereInput

    """Updates to document content"""
    data: SubmissionUpdateManyInput!
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManySubmissionsConnection)")

  """Delete many Submission documents"""
  deleteManySubmissions(
    """Documents to delete"""
    where: SubmissionManyWhereInput
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManySubmissionsConnection)")

  """Publish many Submission documents"""
  publishManySubmissions(
    """Identifies documents in each stage to be published"""
    where: SubmissionManyWhereInput

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManySubmissionsConnection)")

  """Unpublish many Submission documents"""
  unpublishManySubmissions(
    """Identifies documents in each stage"""
    where: SubmissionManyWhereInput

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManySubmissionsConnection)")
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

""""""
type Page implements Node {
  """System stage field"""
  stage: Stage!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Potential locales that should be returned"""
    locales: [Locale!]! = [en, de]

    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false
  ): [Page!]!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Page!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime
  slug: String!
  title: String!
  isNavigation: Boolean!
  isHeader: Boolean!
  content: [String!]!
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form

  """List of Page versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input PageConnectInput {
  """Document to connect"""
  where: PageWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type PageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PageEdge!]!
  aggregate: Aggregate!
}

""""""
input PageCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  slug: String!

  """title input for default locale (en)"""
  title: String!
  isNavigation: Boolean!
  isHeader: Boolean!

  """content input for default locale (en)"""
  content: [String!]
  form: FormCreateOneInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: PageCreateLocalizationsInput
}

""""""
input PageCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
  content: [String!]
}

""""""
input PageCreateLocalizationInput {
  """Localization input"""
  data: PageCreateLocalizationDataInput!
  locale: Locale!
}

""""""
input PageCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [PageCreateLocalizationInput!]
}

""""""
input PageCreateManyInlineInput {
  """Create and connect multiple existing Page documents"""
  create: [PageCreateInput!]

  """Connect multiple existing Page documents"""
  connect: [PageWhereUniqueInput!]
}

""""""
input PageCreateOneInlineInput {
  """Create and connect one Page document"""
  create: PageCreateInput

  """Connect one existing Page document"""
  connect: PageWhereUniqueInput
}

"""An edge in a connection."""
type PageEdge {
  """The item at the end of the edge."""
  node: Page!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """Number of items in the current page."""
  pageSize: Int
}

"""Identifies documents"""
input PageManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  isNavigation: Boolean

  """All values that are not equal to given value."""
  isNavigation_not: Boolean
  isHeader: Boolean

  """All values that are not equal to given value."""
  isHeader_not: Boolean
  form: FormWhereInput
}

""""""
enum PageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  isNavigation_ASC
  isNavigation_DESC
  isHeader_ASC
  isHeader_DESC
  content_ASC
  content_DESC
}

""""""
input PageUpdateInput {
  slug: String

  """title input for default locale (en)"""
  title: String
  isNavigation: Boolean
  isHeader: Boolean

  """content input for default locale (en)"""
  content: [String!]
  form: FormUpdateOneInlineInput

  """Manage document localizations"""
  localizations: PageUpdateLocalizationsInput
}

""""""
input PageUpdateLocalizationDataInput {
  title: String
  content: [String!]
}

""""""
input PageUpdateLocalizationInput {
  data: PageUpdateLocalizationDataInput!
  locale: Locale!
}

""""""
input PageUpdateLocalizationsInput {
  """Localizations to create"""
  create: [PageCreateLocalizationInput!]

  """Localizations to update"""
  update: [PageUpdateLocalizationInput!]
  upsert: [PageUpsertLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]
}

""""""
input PageUpdateManyInlineInput {
  """Create and connect multiple Page documents"""
  create: [PageCreateInput!]

  """Connect multiple existing Page documents"""
  connect: [PageConnectInput!]

  """
  Override currently-connected documents with multiple existing Page documents
  """
  set: [PageWhereUniqueInput!]

  """Update multiple Page documents"""
  update: [PageUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Page documents"""
  upsert: [PageUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Page documents"""
  disconnect: [PageWhereUniqueInput!]

  """Delete multiple Page documents"""
  delete: [PageWhereUniqueInput!]
}

""""""
input PageUpdateManyInput {
  isNavigation: Boolean
  isHeader: Boolean

  """content input for default locale (en)"""
  content: [String!]

  """Optional updates to localizations"""
  localizations: PageUpdateManyLocalizationsInput
}

""""""
input PageUpdateManyLocalizationDataInput {
  content: [String!]
}

""""""
input PageUpdateManyLocalizationInput {
  data: PageUpdateManyLocalizationDataInput!
  locale: Locale!
}

""""""
input PageUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [PageUpdateManyLocalizationInput!]
}

""""""
input PageUpdateManyWithNestedWhereInput {
  """Document search"""
  where: PageWhereInput!

  """Update many input"""
  data: PageUpdateManyInput!
}

""""""
input PageUpdateOneInlineInput {
  """Create and connect one Page document"""
  create: PageCreateInput

  """Update single Page document"""
  update: PageUpdateWithNestedWhereUniqueInput

  """Upsert single Page document"""
  upsert: PageUpsertWithNestedWhereUniqueInput

  """Connect existing Page document"""
  connect: PageWhereUniqueInput

  """Disconnect currently connected Page document"""
  disconnect: Boolean

  """Delete currently connected Page document"""
  delete: Boolean
}

""""""
input PageUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Document to update"""
  data: PageUpdateInput!
}

""""""
input PageUpsertInput {
  """Create document if it didn't exist"""
  create: PageCreateInput!

  """Update document if it exists"""
  update: PageUpdateInput!
}

""""""
input PageUpsertLocalizationInput {
  update: PageUpdateLocalizationDataInput!
  create: PageCreateLocalizationDataInput!
  locale: Locale!
}

""""""
input PageUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: PageWhereUniqueInput!

  """Upsert data"""
  data: PageUpsertInput!
}

"""Identifies documents"""
input PageWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [PageWhereInput!]

  """Logical OR on all given filters."""
  OR: [PageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string"""
  slug_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string"""
  title_not_ends_with: String
  isNavigation: Boolean

  """All values that are not equal to given value."""
  isNavigation_not: Boolean
  isHeader: Boolean

  """All values that are not equal to given value."""
  isHeader_not: Boolean

  """
  Matches if the field array contains *all* items provided to the filter and order does match
  """
  content: [String!]

  """
  Matches if the field array does not contains *all* items provided to the filter or order does not match
  """
  content_not: [String!]

  """Matches if the field array contains *all* items provided to the filter"""
  content_contains_all: [String!]

  """
  Matches if the field array contains at least one item provided to the filter
  """
  content_contains_some: [String!]

  """
  Matches if the field array does not contain any of the items provided to the filter
  """
  content_contains_none: [String!]
  form: FormWhereInput
}

"""References Page record uniquely"""
input PageWhereUniqueInput {
  id: ID
  slug: String
}

""""""
input PublishLocaleInput {
  """Locales to publish"""
  locale: Locale!

  """Stages to publish selected locales to"""
  stages: [Stage!]!
}

""""""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Node

  """Retrieve multiple articles"""
  articles(
    where: ArticleWhereInput
    orderBy: ArticleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Article` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Article!]!

  """Retrieve a single article"""
  article(
    where: ArticleWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Article` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Article

  """Retrieve multiple articles using the Relay connection interface"""
  articlesConnection(
    where: ArticleWhereInput
    orderBy: ArticleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Article` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): ArticleConnection!

  """Retrieve document version"""
  articleVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple assets"""
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Asset!]!

  """Retrieve a single asset"""
  asset(
    where: AssetWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Asset

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): AssetConnection!

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple forms"""
  forms(
    where: FormWhereInput
    orderBy: FormOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Form!]!

  """Retrieve a single form"""
  form(
    where: FormWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Form

  """Retrieve multiple forms using the Relay connection interface"""
  formsConnection(
    where: FormWhereInput
    orderBy: FormOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormConnection!

  """Retrieve document version"""
  formVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple formCheckboxes"""
  formCheckboxes(
    where: FormCheckboxWhereInput
    orderBy: FormCheckboxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormCheckbox` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [FormCheckbox!]!

  """Retrieve a single formCheckbox"""
  formCheckbox(
    where: FormCheckboxWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormCheckbox` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormCheckbox

  """Retrieve multiple formCheckboxes using the Relay connection interface"""
  formCheckboxesConnection(
    where: FormCheckboxWhereInput
    orderBy: FormCheckboxOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormCheckbox` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormCheckboxConnection!

  """Retrieve document version"""
  formCheckboxVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple formInputs"""
  formInputs(
    where: FormInputWhereInput
    orderBy: FormInputOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormInput` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [FormInput!]!

  """Retrieve a single formInput"""
  formInput(
    where: FormInputWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormInput` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormInput

  """Retrieve multiple formInputs using the Relay connection interface"""
  formInputsConnection(
    where: FormInputWhereInput
    orderBy: FormInputOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormInput` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormInputConnection!

  """Retrieve document version"""
  formInputVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple formOptions"""
  formOptions(
    where: FormOptionWhereInput
    orderBy: FormOptionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormOption` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [FormOption!]!

  """Retrieve a single formOption"""
  formOption(
    where: FormOptionWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormOption` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormOption

  """Retrieve multiple formOptions using the Relay connection interface"""
  formOptionsConnection(
    where: FormOptionWhereInput
    orderBy: FormOptionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormOption` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormOptionConnection!

  """Retrieve document version"""
  formOptionVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple formSelects"""
  formSelects(
    where: FormSelectWhereInput
    orderBy: FormSelectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormSelect` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [FormSelect!]!

  """Retrieve a single formSelect"""
  formSelect(
    where: FormSelectWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormSelect` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormSelect

  """Retrieve multiple formSelects using the Relay connection interface"""
  formSelectsConnection(
    where: FormSelectWhereInput
    orderBy: FormSelectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormSelect` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormSelectConnection!

  """Retrieve document version"""
  formSelectVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple formTextareas"""
  formTextareas(
    where: FormTextareaWhereInput
    orderBy: FormTextareaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormTextarea` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [FormTextarea!]!

  """Retrieve a single formTextarea"""
  formTextarea(
    where: FormTextareaWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormTextarea` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormTextarea

  """Retrieve multiple formTextareas using the Relay connection interface"""
  formTextareasConnection(
    where: FormTextareaWhereInput
    orderBy: FormTextareaOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `FormTextarea` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): FormTextareaConnection!

  """Retrieve document version"""
  formTextareaVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple pages"""
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Page!]!

  """Retrieve a single page"""
  page(
    where: PageWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Page

  """Retrieve multiple pages using the Relay connection interface"""
  pagesConnection(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Page` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): PageConnection!

  """Retrieve document version"""
  pageVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple submissions"""
  submissions(
    where: SubmissionWhereInput
    orderBy: SubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Submission` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): [Submission!]!

  """Retrieve a single submission"""
  submission(
    where: SubmissionWhereUniqueInput!
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Submission` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): Submission

  """Retrieve multiple submissions using the Relay connection interface"""
  submissionsConnection(
    where: SubmissionWhereInput
    orderBy: SubmissionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED

    """
    Defines which locales should be returned.
    
    Note that `Submission` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
  ): SubmissionConnection!

  """Retrieve document version"""
  submissionVersion(where: VersionWhereInput!): DocumentVersion
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

""""""
scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}

""""""
scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
  """Returns AST representation"""
  raw: RichTextAST!

  """Returns HTMl representation"""
  html: String!

  """Returns Markdown representation"""
  markdown: String!

  """Returns plain-text contents of RichText"""
  text: String!
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

"""Stage system enumeration"""
enum Stage {
  """The Published stage is where you can publish your content to."""
  PUBLISHED

  """The Draft is the default stage for all your content."""
  DRAFT
}

""""""
type Submission implements Node {
  """System stage field"""
  stage: Stage!

  """Get the document in other stages"""
  documentInStages(
    """Potential stages that should be returned"""
    stages: [Stage!]! = [PUBLISHED, DRAFT]

    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false
  ): [Submission!]!

  """The unique identifier"""
  id: ID!

  """The time the document was created"""
  createdAt: DateTime!

  """The time the document was updated"""
  updatedAt: DateTime!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime
  formData: Json
  form(
    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `form` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Form

  """List of Submission versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!
}

""""""
input SubmissionConnectInput {
  """Document to connect"""
  where: SubmissionWhereUniqueInput!

  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput
}

"""A connection to a list of items."""
type SubmissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubmissionEdge!]!
  aggregate: Aggregate!
}

""""""
input SubmissionCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  formData: Json
  form: FormCreateOneInlineInput
}

""""""
input SubmissionCreateManyInlineInput {
  """Create and connect multiple existing Submission documents"""
  create: [SubmissionCreateInput!]

  """Connect multiple existing Submission documents"""
  connect: [SubmissionWhereUniqueInput!]
}

""""""
input SubmissionCreateOneInlineInput {
  """Create and connect one Submission document"""
  create: SubmissionCreateInput

  """Connect one existing Submission document"""
  connect: SubmissionWhereUniqueInput
}

"""An edge in a connection."""
type SubmissionEdge {
  """The item at the end of the edge."""
  node: Submission!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Identifies documents"""
input SubmissionManyWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SubmissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubmissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubmissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

""""""
enum SubmissionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}

""""""
input SubmissionUpdateInput {
  formData: Json
  form: FormUpdateOneInlineInput
}

""""""
input SubmissionUpdateManyInlineInput {
  """Create and connect multiple Submission documents"""
  create: [SubmissionCreateInput!]

  """Connect multiple existing Submission documents"""
  connect: [SubmissionConnectInput!]

  """
  Override currently-connected documents with multiple existing Submission documents
  """
  set: [SubmissionWhereUniqueInput!]

  """Update multiple Submission documents"""
  update: [SubmissionUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Submission documents"""
  upsert: [SubmissionUpsertWithNestedWhereUniqueInput!]

  """Disconnect multiple Submission documents"""
  disconnect: [SubmissionWhereUniqueInput!]

  """Delete multiple Submission documents"""
  delete: [SubmissionWhereUniqueInput!]
}

""""""
input SubmissionUpdateManyInput {
  formData: Json
}

""""""
input SubmissionUpdateManyWithNestedWhereInput {
  """Document search"""
  where: SubmissionWhereInput!

  """Update many input"""
  data: SubmissionUpdateManyInput!
}

""""""
input SubmissionUpdateOneInlineInput {
  """Create and connect one Submission document"""
  create: SubmissionCreateInput

  """Update single Submission document"""
  update: SubmissionUpdateWithNestedWhereUniqueInput

  """Upsert single Submission document"""
  upsert: SubmissionUpsertWithNestedWhereUniqueInput

  """Connect existing Submission document"""
  connect: SubmissionWhereUniqueInput

  """Disconnect currently connected Submission document"""
  disconnect: Boolean

  """Delete currently connected Submission document"""
  delete: Boolean
}

""""""
input SubmissionUpdateWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SubmissionWhereUniqueInput!

  """Document to update"""
  data: SubmissionUpdateInput!
}

""""""
input SubmissionUpsertInput {
  """Create document if it didn't exist"""
  create: SubmissionCreateInput!

  """Update document if it exists"""
  update: SubmissionUpdateInput!
}

""""""
input SubmissionUpsertWithNestedWhereUniqueInput {
  """Unique document search"""
  where: SubmissionWhereUniqueInput!

  """Upsert data"""
  data: SubmissionUpsertInput!
}

"""Identifies documents"""
input SubmissionWhereInput {
  """Contains search across all appropriate fields."""
  _search: String

  """Logical AND on all given filters."""
  AND: [SubmissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubmissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubmissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  publishedAt: DateTime

  """All values that are not equal to given value."""
  publishedAt_not: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime!]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime
  form: FormWhereInput
}

"""References Submission record uniquely"""
input SubmissionWhereUniqueInput {
  id: ID
}

""""""
enum SystemDateTimeFieldVariation {
  BASE
  LOCALIZATION
  COMBINED
}

""""""
input UnpublishLocaleInput {
  """Locales to unpublish"""
  locale: Locale!

  """Stages to unpublish selected locales from"""
  stages: [Stage!]!
}

"""System User Kind"""
enum UserKind {
  MEMBER
  PAT
  PUBLIC
  WEBHOOK
}

""""""
type Version {
  id: ID!
  stage: Stage!
  revision: Int!
  createdAt: DateTime!
}

""""""
input VersionWhereInput {
  id: ID!
  stage: Stage!
  revision: Int!
}

""""""
enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
}

""""""
enum _MutationInputFieldKind {
  scalar
  richText
  richTextWithEmbeds
  enum
  relation
  union
  virtual
}

""""""
enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
}

""""""
enum _OrderDirection {
  asc
  desc
}

""""""
enum _RelationInputCardinality {
  one
  many
}

""""""
enum _RelationInputKind {
  create
  update
}

""""""
enum _RelationKind {
  regular
  union
}

""""""
enum _SystemDateTimeFieldVariation {
  base
  localization
  combined
}
